<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\lwip_gnu.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\lwip_gnu.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 728]: Last Updated: Wed Sep 21 12:21:07 2016
<BR><P>
<H3>Maximum Stack Usage =       1068 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
recv_callback_tftp &rArr; process_tftp_request &rArr; tftp_process_read &rArr; tftp_send_next_block &rArr; tftp_send_data_packet &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2e916b0]">Reset_Handler</a>
 <LI><a href="#[fddeec]">NMI_Handler</a>
 <LI><a href="#[fddf64]">HardFault_Handler</a>
 <LI><a href="#[fddf28]">MemManage_Handler</a>
 <LI><a href="#[fde018]">BusFault_Handler</a>
 <LI><a href="#[fdddfc]">UsageFault_Handler</a>
 <LI><a href="#[fdde74]">SVC_Handler</a>
 <LI><a href="#[fddfdc]">DebugMon_Handler</a>
 <LI><a href="#[fddeb0]">PendSV_Handler</a>
 <LI><a href="#[fdde38]">SysTick_Handler</a>
 <LI><a href="#[2e90648]">WWDG_IRQHandler</a>
 <LI><a href="#[2e90bac]">PVD_IRQHandler</a>
 <LI><a href="#[2e90a08]">TAMPER_IRQHandler</a>
 <LI><a href="#[2e90af8]">RTC_IRQHandler</a>
 <LI><a href="#[2e90d50]">FLASH_IRQHandler</a>
 <LI><a href="#[2e90b70]">RCC_IRQHandler</a>
 <LI><a href="#[2e90ef4]">EXTI0_IRQHandler</a>
 <LI><a href="#[2e90e7c]">EXTI1_IRQHandler</a>
 <LI><a href="#[2e90e40]">EXTI2_IRQHandler</a>
 <LI><a href="#[2e90e04]">EXTI3_IRQHandler</a>
 <LI><a href="#[2e90dc8]">EXTI4_IRQHandler</a>
 <LI><a href="#[2e9123c]">DMA1_Channel1_IRQHandler</a>
 <LI><a href="#[2e91200]">DMA1_Channel2_IRQHandler</a>
 <LI><a href="#[2e911c4]">DMA1_Channel3_IRQHandler</a>
 <LI><a href="#[2e91188]">DMA1_Channel4_IRQHandler</a>
 <LI><a href="#[2e9114c]">DMA1_Channel5_IRQHandler</a>
 <LI><a href="#[2e91110]">DMA1_Channel6_IRQHandler</a>
 <LI><a href="#[2e910d4]">DMA1_Channel7_IRQHandler</a>
 <LI><a href="#[2e91458]">ADC1_2_IRQHandler</a>
 <LI><a href="#[2e91368]">CAN1_TX_IRQHandler</a>
 <LI><a href="#[2e9141c]">CAN1_RX0_IRQHandler</a>
 <LI><a href="#[2e913e0]">CAN1_RX1_IRQHandler</a>
 <LI><a href="#[2e913a4]">CAN1_SCE_IRQHandler</a>
 <LI><a href="#[2e90d8c]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[2e909cc]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[2e90918]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[2e90954]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[2e90990]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[27cf624]">TIM2_IRQHandler</a>
 <LI><a href="#[2fd39fc]">TIM3_IRQHandler</a>
 <LI><a href="#[2e90864]">TIM4_IRQHandler</a>
 <LI><a href="#[2e90cd8]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[2e90d14]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[2e90c60]">I2C2_EV_IRQHandler</a>
 <LI><a href="#[2e90c9c]">I2C2_ER_IRQHandler</a>
 <LI><a href="#[2e90abc]">SPI1_IRQHandler</a>
 <LI><a href="#[2e90a80]">SPI2_IRQHandler</a>
 <LI><a href="#[2e906fc]">USART1_IRQHandler</a>
 <LI><a href="#[2fd2ca0]">USART2_IRQHandler</a>
 <LI><a href="#[2e90684]">USART3_IRQHandler</a>
 <LI><a href="#[2e90eb8]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[2e90b34]">RTCAlarm_IRQHandler</a>
 <LI><a href="#[2e90be8]">OTG_FS_WKUP_IRQHandler</a>
 <LI><a href="#[2e90828]">TIM5_IRQHandler</a>
 <LI><a href="#[2e90a44]">SPI3_IRQHandler</a>
 <LI><a href="#[2e90774]">UART4_IRQHandler</a>
 <LI><a href="#[2e90738]">UART5_IRQHandler</a>
 <LI><a href="#[2e907ec]">TIM6_IRQHandler</a>
 <LI><a href="#[2e907b0]">TIM7_IRQHandler</a>
 <LI><a href="#[2e91098]">DMA2_Channel1_IRQHandler</a>
 <LI><a href="#[2e9105c]">DMA2_Channel2_IRQHandler</a>
 <LI><a href="#[2e91020]">DMA2_Channel3_IRQHandler</a>
 <LI><a href="#[2e90fe4]">DMA2_Channel4_IRQHandler</a>
 <LI><a href="#[2e90fa8]">DMA2_Channel5_IRQHandler</a>
 <LI><a href="#[fddfa0]">ETH_IRQHandler</a>
 <LI><a href="#[2e90f30]">ETH_WKUP_IRQHandler</a>
 <LI><a href="#[2e91278]">CAN2_TX_IRQHandler</a>
 <LI><a href="#[2e9132c]">CAN2_RX0_IRQHandler</a>
 <LI><a href="#[2e912f0]">CAN2_RX1_IRQHandler</a>
 <LI><a href="#[2e912b4]">CAN2_SCE_IRQHandler</a>
 <LI><a href="#[2e90c24]">OTG_FS_IRQHandler</a>
 <LI><a href="#[27cf5e8]">main</a>
 <LI><a href="#[fdc3bc]">SystemInit</a>
 <LI><a href="#[2fd1f80]">__main</a>
 <LI><a href="#[fe055c]">ethernet_input</a>
 <LI><a href="#[fe0520]">ethernetif_init</a>
 <LI><a href="#[2fcb770]">_sputc</a>
 <LI><a href="#[2de617c]">dhcp_recv</a>
 <LI><a href="#[2f28df4]">eMBMasterRTUStart</a>
 <LI><a href="#[2f28db8]">eMBMasterRTUStop</a>
 <LI><a href="#[2f28e30]">eMBMasterRTUSend</a>
 <LI><a href="#[2f28e6c]">eMBMasterRTUReceive</a>
 <LI><a href="#[2f28c50]">xMBMasterRTUReceiveFSM</a>
 <LI><a href="#[2f28bd8]">xMBMasterRTUTransmitFSM</a>
 <LI><a href="#[2f28c14]">xMBMasterRTUTimerExpired</a>
 <LI><a href="#[2e935dc]">etharp_output</a>
 <LI><a href="#[2e92484]">low_level_output</a>
 <LI><a href="#[2e95f94]">ipfrag_free_pbuf_custom</a>
 <LI><a href="#[27d5b28]">recv_callback_tftp</a>
 <LI><a href="#[2dd9210]">tcp_recv_null</a>
 <LI><a href="#[fd8000]">tcp_client_connected</a>
 <LI><a href="#[fd7fc4]">tcp_client_err</a>
 <LI><a href="#[fd7f4c]">tcp_client_reciver</a>
 <LI><a href="#[27d5b28]">recv_callback_tftp</a>
 <LI><a href="#[27d5b28]">recv_callback_tftp</a>
 <LI><a href="#[27d5aec]">rrq_recv_callback</a>
 <LI><a href="#[27d581c]">wrq_recv_callback</a>
 <LI><a href="#[fd7ed4]">udp_client_callback</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2fd1f80]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[2fc751c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2fc73f0]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[30c4fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2fc73b4]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[30c4fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2fc72c4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[fde054]"></a>wait</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[fddf64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[2e916b0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e91458]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e9141c]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e913e0]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e913a4]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e91368]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e9132c]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e912f0]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e912b4]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e91278]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e9123c]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e91200]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e911c4]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e91188]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e9114c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e91110]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e910d4]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e91098]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e9105c]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e91020]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90fe4]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90fa8]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90f30]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90ef4]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90eb8]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90e7c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90e40]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90e04]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90dc8]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90d8c]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90d50]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90d14]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90cd8]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90c9c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90c60]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90c24]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90be8]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90bac]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90b70]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90b34]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90af8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90abc]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90a80]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90a44]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90a08]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e909cc]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90990]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90954]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90918]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90864]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90828]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e907ec]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e907b0]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90774]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90738]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e906fc]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90684]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2e90648]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_cl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2fd1cb0]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd79ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[fd7e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getmeminf
<LI><a href="#[fd7ed4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_callback
<LI><a href="#[fd7f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_reciver
<LI><a href="#[fddd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Eth_Packet
<LI><a href="#[27cf354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterPoll
<LI><a href="#[27d563c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_data_message
<LI><a href="#[27d58d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_message
<LI><a href="#[2ddebd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[2de51c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2e92484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[2e924c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[2e938ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[2e938e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[2e93924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[2e93a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[2e9600c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[2e96048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[2e97fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[2e97fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[2e99cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[2fd1c74]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2eb8dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_getFileStructure
<LI><a href="#[2eb8f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findFreeEntryinBuf
<LI><a href="#[2eb8f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findFileinBuf
</UL>

<P><STRONG><a name="[2fd1c38]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2fd1b48]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fd19e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2fd1a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2fd1b0c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2fd1ad0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2fd1a94]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd1b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL></UL>

<P><STRONG><a name="[2fd1a58]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd78f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[fe05d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2dd9468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[2de6230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2e96048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
</UL>

<P><STRONG><a name="[2fd1a1c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2fd19e0]"></a>_memset$wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fd1b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2fd1710]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd7f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_reciver
<LI><a href="#[27d5a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_construct_error_message
<LI><a href="#[2de6320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
</UL>

<P><STRONG><a name="[2fd1530]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_reciver
<LI><a href="#[fe055c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[2fd1440]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27d55c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_errormsg
<LI><a href="#[27d56f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_extract_filename
</UL>

<P><STRONG><a name="[2fd1350]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_reciver
</UL>

<P><STRONG><a name="[30c6a18]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[30c69dc]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fcb860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[30c4fd8]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2fc73b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc73f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[30c4f9c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[30c4678]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[30c463c]"></a>__decompress1</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[fde018]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[fddfdc]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[fdddc0]"></a>ETH_DMAClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_DMAClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[fddfa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[fdc77c]"></a>ETH_DMAITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_DMAITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fdc95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Configuration
</UL>

<P><STRONG><a name="[2d32564]"></a>ETH_DMAReceptionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_DMAReceptionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2d311b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[2d32528]"></a>ETH_DMARxDescChainInit</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32_eth.o(i.ETH_DMARxDescChainInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_DMARxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e91f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TxPkt_ChainMode
<LI><a href="#[2e924fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[2d324b0]"></a>ETH_DMARxDescReceiveITConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_DMARxDescReceiveITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2e91f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TxPkt_ChainMode
<LI><a href="#[2e924fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[2d323fc]"></a>ETH_DMATransmissionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_DMATransmissionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2d311b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[2d32348]"></a>ETH_DMATxDescChainInit</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32_eth.o(i.ETH_DMATxDescChainInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_DMATxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e91f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TxPkt_ChainMode
<LI><a href="#[2e924fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[fdc740]"></a>ETH_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32_eth.o(i.ETH_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2c80464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fdc95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Configuration
</UL>

<P><STRONG><a name="[2d3203c]"></a>ETH_FlushTransmitFIFO</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_FlushTransmitFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[2d311b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[2e91fd4]"></a>ETH_GetCurrentTxBuffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethernetif.o(i.ETH_GetCurrentTxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[2e92484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[2d31da8]"></a>ETH_GetDMARxDescFrameLength</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_GetDMARxDescFrameLength))
<BR><BR>[Called By]<UL><LI><a href="#[fddd84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetRxPktSize
</UL>

<P><STRONG><a name="[fddd84]"></a>ETH_GetRxPktSize</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, stm32_eth.o(i.ETH_GetRxPktSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ETH_GetRxPktSize
</UL>
<BR>[Calls]<UL><LI><a href="#[2d31da8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetDMARxDescFrameLength
</UL>
<BR>[Called By]<UL><LI><a href="#[fddfa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[fdc704]"></a>ETH_GetSoftwareResetStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_GetSoftwareResetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[fdc95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Configuration
</UL>

<P><STRONG><a name="[fddfa0]"></a>ETH_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_it.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ETH_IRQHandler &rArr; Read_Eth_Packet &rArr; ETH_RxPkt_ChainMode
</UL>
<BR>[Calls]<UL><LI><a href="#[fddd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Eth_Packet
<LI><a href="#[fddd84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetRxPktSize
<LI><a href="#[fdddc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[fdc6c8]"></a>ETH_Init</STRONG> (Thumb, 562 bytes, Stack size 56 bytes, stm32_eth.o(i.ETH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fdc434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[2d3113c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[2d31448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[2d32870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[fdc95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Configuration
</UL>

<P><STRONG><a name="[2d31844]"></a>ETH_MACAddressConfig</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32_eth.o(i.ETH_MACAddressConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_MACAddressConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fe06c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MAC_Address
</UL>

<P><STRONG><a name="[2d31718]"></a>ETH_MACReceptionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_MACReceptionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2d311b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[2d316dc]"></a>ETH_MACTransmissionCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_MACTransmissionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2d311b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[2d31448]"></a>ETH_ReadPHYRegister</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32_eth.o(i.ETH_ReadPHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[fdc6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[fe0700]"></a>ETH_Recive_Poll</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ethernetif.o(i.ETH_Recive_Poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ETH_Recive_Poll &rArr; LwIP_Pkt_Handle &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fe073c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Pkt_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[fe0778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[2e91f98]"></a>ETH_RxPkt_ChainMode</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, ethernetif.o(i.ETH_RxPkt_ChainMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_RxPkt_ChainMode
</UL>
<BR>[Called By]<UL><LI><a href="#[fddd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Eth_Packet
</UL>

<P><STRONG><a name="[fdc68c]"></a>ETH_SoftwareReset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_SoftwareReset))
<BR><BR>[Called By]<UL><LI><a href="#[fdc95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Configuration
</UL>

<P><STRONG><a name="[2d311b4]"></a>ETH_Start</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32_eth.o(i.ETH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ETH_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[2d316dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[2d31718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
<LI><a href="#[2d3203c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
<LI><a href="#[2d323fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATransmissionCmd
<LI><a href="#[2d32564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAReceptionCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2e91f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TxPkt_ChainMode
<LI><a href="#[2e924fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>

<P><STRONG><a name="[fdc650]"></a>ETH_StructInit</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[fdc95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Configuration
</UL>

<P><STRONG><a name="[2e91f5c]"></a>ETH_TxPkt_ChainMode</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ethernetif.o(i.ETH_TxPkt_ChainMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ETH_TxPkt_ChainMode &rArr; Ethernet_Configuration &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fdc95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Configuration
<LI><a href="#[fe06c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MAC_Address
<LI><a href="#[2d311b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
<LI><a href="#[2d32348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescChainInit
<LI><a href="#[2d324b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescReceiveITConfig
<LI><a href="#[2d32528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e92484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[2d3113c]"></a>ETH_WritePHYRegister</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32_eth.o(i.ETH_WritePHYRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_WritePHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[fdc6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[2f27198]"></a>EnterCriticalSection</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, port.o(i.EnterCriticalSection))
<BR><BR>[Called By]<UL><LI><a href="#[2f28db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUStop
<LI><a href="#[2f28df4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUStart
<LI><a href="#[2f28e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUSend
<LI><a href="#[2f28e6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUReceive
<LI><a href="#[2f28ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUInit
<LI><a href="#[2fd5a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
</UL>

<P><STRONG><a name="[fdc95c]"></a>Ethernet_Configuration</STRONG> (Thumb, 130 bytes, Stack size 192 bytes, stm32f107.o(i.Ethernet_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Ethernet_Configuration &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fdc3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCOConfig
<LI><a href="#[fdc614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ETH_MediaInterfaceConfig
<LI><a href="#[fdc650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_StructInit
<LI><a href="#[fdc68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SoftwareReset
<LI><a href="#[fdc6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[fdc704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetSoftwareResetStatus
<LI><a href="#[fdc740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
<LI><a href="#[fdc77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fdc8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
<LI><a href="#[2e91f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TxPkt_ChainMode
</UL>

<P><STRONG><a name="[2f2715c]"></a>ExitCriticalSection</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, port.o(i.ExitCriticalSection))
<BR><BR>[Called By]<UL><LI><a href="#[2f28db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUStop
<LI><a href="#[2f28df4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUStart
<LI><a href="#[2f28e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUSend
<LI><a href="#[2f28e6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUReceive
<LI><a href="#[2f28ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUInit
<LI><a href="#[2fd5a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
</UL>

<P><STRONG><a name="[fd7e5c]"></a>FS_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, filesystem.o(i.FS_Write))
<BR><BR>[Called By]<UL><LI><a href="#[fd812c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpTestThread
</UL>

<P><STRONG><a name="[fdc920]"></a>GPIO_Configuration</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, stm32f107.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fdc59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[fdc5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fdc8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
</UL>

<P><STRONG><a name="[fdc614]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ETH_MediaInterfaceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fdc95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Configuration
</UL>

<P><STRONG><a name="[fdc5d8]"></a>GPIO_Init</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fdc920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[2f31878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
<LI><a href="#[2fd5a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
</UL>

<P><STRONG><a name="[fdc59c]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fdc920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[2fd5a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
</UL>

<P><STRONG><a name="[27d1be0]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[2f27120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortSerialEnable
<LI><a href="#[2f3246c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
</UL>

<P><STRONG><a name="[27d1ba4]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[2f27120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortSerialEnable
<LI><a href="#[2f316d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiInit
<LI><a href="#[2f3246c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
</UL>

<P><STRONG><a name="[fe07f0]"></a>GetMacAddr</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, netconf.o(i.GetMacAddr))
<BR><BR>[Called By]<UL><LI><a href="#[fe07b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[fd7e20]"></a>Getmeminf</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, mem.o(i.Getmeminf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Getmeminf &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fcb4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_reciver
</UL>

<P><STRONG><a name="[fddf64]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[fde054]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27cf660]"></a>InitTIM</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, main.o(i.InitTIM))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitTIM &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fdc524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[fdc560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[27cf390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[27cf3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[27cf408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[27cf480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[27cf4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[27cf534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[27cf570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[27cf5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe07b4]"></a>LwIP_Init</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, netconf.o(i.LwIP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = LwIP_Init &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fe03b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[fe03f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[fe0430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[fe046c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[fe04a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[fe05d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[fe06c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MAC_Address
<LI><a href="#[fe07f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMacAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[27cf5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe0778]"></a>LwIP_Periodic_Handle</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, netconf.o(i.LwIP_Periodic_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 932<LI>Call Chain = LwIP_Periodic_Handle &rArr; TftpTrm250ms &rArr; tftp_send_error_message &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fe037c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
<LI><a href="#[fe0598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[fe0610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[fe064c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[fe0688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpTrm250ms
<LI><a href="#[fe0700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Recive_Poll
</UL>
<BR>[Called By]<UL><LI><a href="#[27cf5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe073c]"></a>LwIP_Pkt_Handle</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, netconf.o(i.LwIP_Pkt_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = LwIP_Pkt_Handle &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fe04e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>
<BR>[Called By]<UL><LI><a href="#[fe0700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Recive_Poll
</UL>

<P><STRONG><a name="[2fd4c44]"></a>Master_Send</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, modbus_main.o(i.Master_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Master_Send &rArr; eMBMasterRTUSend &rArr; vMBMasterPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2f28d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterGetPDUSndBuf
<LI><a href="#[2f28e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUSend
</UL>
<BR>[Called By]<UL><LI><a href="#[27cf5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSenttset
</UL>

<P><STRONG><a name="[fddf28]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27cf5ac]"></a>ModbusSenttset</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, modbus_main.o(i.ModbusSenttset))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ModbusSenttset &rArr; Master_Send &rArr; eMBMasterRTUSend &rArr; vMBMasterPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd4c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[27cf5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fddeec]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[fdc8e4]"></a>NVIC_Configuration</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f107.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fdc4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[fdc524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[fdc560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fdc8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
</UL>

<P><STRONG><a name="[fdc560]"></a>NVIC_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fdc8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[27cf660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTIM
<LI><a href="#[2fd59a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortTimersInit
<LI><a href="#[2fd5a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
</UL>

<P><STRONG><a name="[fdc524]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fdc8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[27cf660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTIM
<LI><a href="#[2fd59a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortTimersInit
<LI><a href="#[2fd5a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
</UL>

<P><STRONG><a name="[fdc4e8]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[fdc8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[fddeb0]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[fdc4ac]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[fdc8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
</UL>

<P><STRONG><a name="[2c80464]"></a>RCC_AHBPeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[fdc740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
</UL>

<P><STRONG><a name="[27cf570]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[27cf660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTIM
<LI><a href="#[2fd59a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortTimersInit
<LI><a href="#[2fd5a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
</UL>

<P><STRONG><a name="[fdc470]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[fdc8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
<LI><a href="#[2f31878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
<LI><a href="#[2fd5a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
</UL>

<P><STRONG><a name="[fdc434]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fdc6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[fdc8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
<LI><a href="#[2d3caa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[fdc3f8]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_MCOConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fdc95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Configuration
</UL>

<P><STRONG><a name="[fddd48]"></a>Read_Eth_Packet</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ethernetif.o(i.Read_Eth_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Read_Eth_Packet &rArr; ETH_RxPkt_ChainMode
</UL>
<BR>[Calls]<UL><LI><a href="#[2e91f98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_RxPkt_ChainMode
<LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fddfa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[2d04610]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[2f31878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>

<P><STRONG><a name="[2d04430]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[2f3183c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_if_spiSend
<LI><a href="#[2f3246c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
</UL>

<P><STRONG><a name="[2d0437c]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[2f3183c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_if_spiSend
<LI><a href="#[2f3246c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
</UL>

<P><STRONG><a name="[2d04340]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[2f3183c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_if_spiSend
<LI><a href="#[2f3246c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
</UL>

<P><STRONG><a name="[2d04304]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f31878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>

<P><STRONG><a name="[fdde74]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[fd8168]"></a>SendDataToSever</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, client_tcpudp.o(i.SendDataToSever))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = SendDataToSever &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd79ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[fd7a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[27cf5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe06c4]"></a>Set_MAC_Address</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ethernetif.o(i.Set_MAC_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Set_MAC_Address &rArr; ETH_MACAddressConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2d31844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACAddressConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fe07b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[2e91f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TxPkt_ChainMode
</UL>

<P><STRONG><a name="[fdde38]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[fddd0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[fdc3bc]"></a>SystemInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[2eba9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[fdc8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(.text)
</UL>
<P><STRONG><a name="[fdc8a8]"></a>System_Setup</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, stm32f107.o(i.System_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = System_Setup &rArr; Ethernet_Configuration &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fdc344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterInit
<LI><a href="#[fdc380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterEnable
<LI><a href="#[fdc3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[fdc434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[fdc470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[fdc4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[fdc8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[fdc920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[fdc95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ethernet_Configuration
<LI><a href="#[fdd3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[27cf5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27cf624]"></a>TIM2_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[27cf444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[27cf4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[27cf4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2fd39fc]"></a>TIM3_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, porttimer_m.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM3_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[27cf444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[27cf4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[27cf4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[2fd3b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvTIMERExpiredISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[27cf534]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[27cf660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTIM
<LI><a href="#[2fd59a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortTimersInit
</UL>

<P><STRONG><a name="[27cf4f8]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[27cf624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[2fd39fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[27cf4bc]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[27cf624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[27cf660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTIM
<LI><a href="#[2f27030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersT35Enable
<LI><a href="#[2f2706c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersRespondTimeoutEnable
<LI><a href="#[2f270a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersDisable
<LI><a href="#[2f270e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersConvertDelayEnable
<LI><a href="#[2fd39fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[2fd59a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortTimersInit
</UL>

<P><STRONG><a name="[27cf480]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[27cf660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTIM
<LI><a href="#[2f27030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersT35Enable
<LI><a href="#[2f2706c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersRespondTimeoutEnable
<LI><a href="#[2f270a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersDisable
<LI><a href="#[2f270e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersConvertDelayEnable
<LI><a href="#[2fd59a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortTimersInit
</UL>

<P><STRONG><a name="[27cf444]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[27cf624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[2fd39fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[27cf408]"></a>TIM_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[27cf660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTIM
<LI><a href="#[2f27030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersT35Enable
<LI><a href="#[2f2706c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersRespondTimeoutEnable
<LI><a href="#[2f270a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersDisable
<LI><a href="#[2f270e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersConvertDelayEnable
<LI><a href="#[2fd59a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortTimersInit
</UL>

<P><STRONG><a name="[27cf3cc]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[27cf660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTIM
<LI><a href="#[2f27030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersT35Enable
<LI><a href="#[2f2706c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersRespondTimeoutEnable
<LI><a href="#[2f270a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersDisable
<LI><a href="#[2f270e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersConvertDelayEnable
</UL>

<P><STRONG><a name="[27cf390]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[27cf660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTIM
<LI><a href="#[2f27030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersT35Enable
<LI><a href="#[2f2706c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersRespondTimeoutEnable
<LI><a href="#[2f270e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersConvertDelayEnable
</UL>

<P><STRONG><a name="[fd812c]"></a>TcpTestThread</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, client_tcpudp.o(i.TcpTestThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = TcpTestThread &rArr; tcp_client_callback &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7e5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FS_Write
<LI><a href="#[fd7e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_callback_app
<LI><a href="#[fd803c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[27cf5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe0688]"></a>TftpTrm250ms</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tftpserver.o(i.TftpTrm250ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 924<LI>Call Chain = TftpTrm250ms &rArr; tftp_send_error_message &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[27d590c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error_message
<LI><a href="#[27d5ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[fe0778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[fddd0c]"></a>Time_Update</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Time_Update))
<BR><BR>[Called By]<UL><LI><a href="#[fdde38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[2fd2ca0]"></a>USART2_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, portserial_m.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3cb54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[2d3ccf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[2fd2dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTTxReadyISR
<LI><a href="#[2fd2e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvvUARTRxISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2d3ccf8]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd2ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[2d3cc44]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[2fd5a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
</UL>

<P><STRONG><a name="[2d3cb54]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd2ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[2d3cadc]"></a>USART_ITConfig</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2f27120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortSerialEnable
<LI><a href="#[2fd5a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
</UL>

<P><STRONG><a name="[2d3caa0]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fdc434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd5a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
</UL>

<P><STRONG><a name="[2d3c8fc]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[2fd5a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialGetByte
</UL>

<P><STRONG><a name="[2d3c848]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[2fd59dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialPutByte
</UL>

<P><STRONG><a name="[fdddfc]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_cl.o(RESET)
</UL>
<P><STRONG><a name="[2fcb518]"></a>__0sprintf$6</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fcb770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2fcb860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2fcb4dc]"></a>__1sprintf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6), UNUSED)

<P><STRONG><a name="[2fcb4a0]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0sprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getmeminf
</UL>

<P><STRONG><a name="[30c47e0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[30c47a4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[30c4768]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2de554c]"></a>dhcp_arp_reply</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de6500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>
<BR>[Called By]<UL><LI><a href="#[2e93a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[fe064c]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_coarse_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de608c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
<LI><a href="#[2de60c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[fe0778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[fe0610]"></a>dhcp_fine_tmr</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_fine_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_timeout &rArr; dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de6050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[fe0778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[2de545c]"></a>dhcp_release</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de5114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de518c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2de5204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2de5240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2de527c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[2de52b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[2de6104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2de626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2de64c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2de653c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2de6050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[2de5420]"></a>dhcp_renew</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_renew))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de5114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de518c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2de6104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2de626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2de62a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2de6320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[2de6398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2de64c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2de653c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2de6050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[2de60c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t1_timeout
</UL>

<P><STRONG><a name="[fe05d4]"></a>dhcp_start</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd78bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[fd78f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[fd7934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[27d5510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[27d57a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[2de5150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[2de53a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[2de6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2fd1a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe07b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[2de53a8]"></a>dhcp_stop</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dhcp_stop &rArr; udp_remove &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[27d5510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[2de6104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[fe05d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[2eb9014]"></a>dir_addCluster</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, dir.o(i.dir_addCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = dir_addCluster &rArr; fat_allocClusterChain &rArr; fs_getLastCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb8aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initClusterChain
<LI><a href="#[2eb8b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_getLastCluster
<LI><a href="#[2eb8ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_clearCluster
<LI><a href="#[2eb8c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_allocClusterChain
<LI><a href="#[2eb8c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_LogicToDiscCluster
<LI><a href="#[2eb8c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_DiscToLogicCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb42bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFreeFile
</UL>

<P><STRONG><a name="[2eb8fd8]"></a>dir_createDefaultEntry</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dir.o(i.dir_createDefaultEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dir_createDefaultEntry &rArr; memCpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb8a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[2eb8f9c]"></a>dir_createDirectoryEntry</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dir.o(i.dir_createDirectoryEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_createDirectoryEntry &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb89fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[2eb8a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
<LI><a href="#[2eb8a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[2eb8f60]"></a>dir_findFileinBuf</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, dir.o(i.dir_findFileinBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dir_findFileinBuf &rArr; strMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb89c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strMatch
<LI><a href="#[2fd1c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb8ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinBuf
</UL>

<P><STRONG><a name="[2eb8f24]"></a>dir_findFreeEntryinBuf</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, dir.o(i.dir_findFreeEntryinBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dir_findFreeEntryinBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd1c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb8ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinBuf
</UL>

<P><STRONG><a name="[2eb8ee8]"></a>dir_findinBuf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dir.o(i.dir_findinBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dir_findinBuf &rArr; dir_findFileinBuf &rArr; strMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb8f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findFreeEntryinBuf
<LI><a href="#[2eb8f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findFileinBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb8e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinRootArea
<LI><a href="#[2eb8eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinCluster
</UL>

<P><STRONG><a name="[2eb8eac]"></a>dir_findinCluster</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, dir.o(i.dir_findinCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dir_findinCluster &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb89fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[2eb8a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
<LI><a href="#[2eb8b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_clusterToSector
<LI><a href="#[2eb8ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb8e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinDir
</UL>

<P><STRONG><a name="[2eb8e70]"></a>dir_findinDir</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, dir.o(i.dir_findinDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dir_findinDir &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb8c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_LogicToDiscCluster
<LI><a href="#[2eb8e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinRootArea
<LI><a href="#[2eb8eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb42bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFreeFile
<LI><a href="#[2eb42f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFile
</UL>

<P><STRONG><a name="[2eb8e34]"></a>dir_findinRootArea</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, dir.o(i.dir_findinRootArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = dir_findinRootArea &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb89fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[2eb8a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
<LI><a href="#[2eb8ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb8e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinDir
</UL>

<P><STRONG><a name="[2eb8df8]"></a>dir_getFatFileName</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, dir.o(i.dir_getFatFileName))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dir_getFatFileName &rArr; file_normalToFatName
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb8a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCpy
<LI><a href="#[2eb8ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memClr
<LI><a href="#[2eb8bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_normalToFatName
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
<LI><a href="#[2eb42bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFreeFile
</UL>

<P><STRONG><a name="[2eb8dbc]"></a>dir_getFileStructure</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dir.o(i.dir_getFileStructure))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_getFileStructure &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb89fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[2eb8a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
<LI><a href="#[2fd1c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[2eb8d80]"></a>dir_setFileSize</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, dir.o(i.dir_setFileSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_setFileSize &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb89fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[2eb8a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fclose
<LI><a href="#[2eb449c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
</UL>

<P><STRONG><a name="[2eb8d44]"></a>dir_setFirstCluster</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, dir.o(i.dir_setFirstCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_setFirstCluster &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb89fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[2eb8a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[2eb8d08]"></a>dir_updateDirectoryEntry</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, dir.o(i.dir_updateDirectoryEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dir_updateDirectoryEntry &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb89fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[2eb8a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
<LI><a href="#[2eb8a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fclose
</UL>

<P><STRONG><a name="[2eb83e4]"></a>disc_initDisc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, disc.o(i.disc_initDisc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = disc_initDisc &rArr; disc_loadMBR &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb83a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disc_loadMBR
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
</UL>

<P><STRONG><a name="[2eb83a8]"></a>disc_loadMBR</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, disc.o(i.disc_loadMBR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = disc_loadMBR &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb82f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_releaseSector
<LI><a href="#[2eb8330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
<LI><a href="#[2eb836c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_getPartitionField
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disc_initDisc
</UL>

<P><STRONG><a name="[fdc380]"></a>eMBMasterEnable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mb_m.o(i.eMBMasterEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eMBMasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[fdc8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
</UL>

<P><STRONG><a name="[fdc344]"></a>eMBMasterInit</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, mb_m.o(i.eMBMasterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = eMBMasterInit &rArr; eMBMasterRTUInit &rArr; xMBMasterPortSerialInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f28cc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortEventInit
<LI><a href="#[2f28ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fdc8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
</UL>

<P><STRONG><a name="[27cf354]"></a>eMBMasterPoll</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, mb_m.o(i.eMBMasterPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eMBMasterPoll
</UL>
<BR>[Calls]<UL><LI><a href="#[2f28c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortEventPost
<LI><a href="#[2f28d04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortEventGet
<LI><a href="#[2f28d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterGetPDUSndBuf
<LI><a href="#[2f28d7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetPDUSndLength
<LI><a href="#[2f28f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterSetIsBusy
<LI><a href="#[2f29010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMBMasterGetDestAddress
<LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27cf5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f28ea8]"></a>eMBMasterRTUInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, mbrtu_m.o(i.eMBMasterRTUInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = eMBMasterRTUInit &rArr; xMBMasterPortSerialInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2715c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[2f27198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
<LI><a href="#[2fd59a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortTimersInit
<LI><a href="#[2fd5a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fdc344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterInit
</UL>

<P><STRONG><a name="[2f28e6c]"></a>eMBMasterRTUReceive</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mbrtu_m.o(i.eMBMasterRTUReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eMBMasterRTUReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2715c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[2f27198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_m.o(i.eMBMasterInit)
</UL>
<P><STRONG><a name="[2f28e30]"></a>eMBMasterRTUSend</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mbrtu_m.o(i.eMBMasterRTUSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = eMBMasterRTUSend &rArr; vMBMasterPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2f27120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortSerialEnable
<LI><a href="#[2f2715c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[2f27198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd4c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_m.o(i.eMBMasterInit)
</UL>
<P><STRONG><a name="[2f28df4]"></a>eMBMasterRTUStart</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mbrtu_m.o(i.eMBMasterRTUStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = eMBMasterRTUStart &rArr; vMBMasterPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2f27030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersT35Enable
<LI><a href="#[2f27120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortSerialEnable
<LI><a href="#[2f2715c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[2f27198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_m.o(i.eMBMasterInit)
</UL>
<P><STRONG><a name="[2f28db8]"></a>eMBMasterRTUStop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mbrtu_m.o(i.eMBMasterRTUStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = eMBMasterRTUStop &rArr; vMBMasterPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2f270a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersDisable
<LI><a href="#[2f27120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortSerialEnable
<LI><a href="#[2f2715c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[2f27198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_m.o(i.eMBMasterInit)
</UL>
<P><STRONG><a name="[fd5af8]"></a>efs_init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, efs.o(i.efs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = efs_init &rArr; fs_initFs &rArr; fs_loadVolumeId &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb7dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_initPartition
<LI><a href="#[2eb7e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_init
<LI><a href="#[2eb7e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_initInterface
<LI><a href="#[2eb7e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initFs
<LI><a href="#[2eb83e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disc_initDisc
</UL>
<BR>[Called By]<UL><LI><a href="#[27d5b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>

<P><STRONG><a name="[2de0a4c]"></a>etharp_cleanup_netif</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, etharp.o(i.etharp_cleanup_netif))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9399c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[2de52b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[2e935dc]"></a>etharp_output</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2ddeb20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2de5330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2e938e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[2e93960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[2e9d794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[2de5330]"></a>etharp_query</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fd7cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2ddea6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[2ddebd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[2de0a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[2e938e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[2e939d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[2e9d794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[2de6578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[2e935dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[2de0a10]"></a>etharp_request</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2e93924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[fe03b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[2de5330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2e93960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[fe0598]"></a>etharp_tmr</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, etharp.o(i.etharp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = etharp_tmr &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9399c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[fe0778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[fe055c]"></a>ethernet_input</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, etharp.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2ddeb20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2e93a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[2e98028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2fd1530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconf.o(i.LwIP_Init)
</UL>
<P><STRONG><a name="[fe0520]"></a>ethernetif_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ethernetif_init &rArr; low_level_init &rArr; ETH_DMATxDescChainInit
</UL>
<BR>[Calls]<UL><LI><a href="#[27d57a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[2e924fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netconf.o(i.LwIP_Init)
</UL>
<P><STRONG><a name="[fe04e4]"></a>ethernetif_input</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ethernetif.o(i.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2e924c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>
<BR>[Called By]<UL><LI><a href="#[fe073c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Pkt_Handle
</UL>

<P><STRONG><a name="[2eb836c]"></a>ex_getPartitionField</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, extract.o(i.ex_getPartitionField))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ex_getPartitionField
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb7304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_getb32
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb83a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disc_loadMBR
</UL>

<P><STRONG><a name="[2eb7340]"></a>ex_getb16</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, extract.o(i.ex_getb16))
<BR><BR>[Called By]<UL><LI><a href="#[2eb1d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_loadVolumeId
<LI><a href="#[2eb1d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_isValidFat
</UL>

<P><STRONG><a name="[2eb7304]"></a>ex_getb32</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, extract.o(i.ex_getb32))
<BR><BR>[Called By]<UL><LI><a href="#[2eb1d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_loadVolumeId
<LI><a href="#[2eb836c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_getPartitionField
</UL>

<P><STRONG><a name="[2eb8c90]"></a>fat_DiscToLogicCluster</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, fat.o(i.fat_DiscToLogicCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = fat_DiscToLogicCluster &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb8c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_LogicToDiscCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb9014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_addCluster
</UL>

<P><STRONG><a name="[2eb8c54]"></a>fat_LogicToDiscCluster</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, fat.o(i.fat_LogicToDiscCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb5aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterChain
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb449c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
<LI><a href="#[2eb44d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fread
<LI><a href="#[2eb5b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_countClustersInChain
<LI><a href="#[2eb8c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_DiscToLogicCluster
<LI><a href="#[2eb8e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinDir
<LI><a href="#[2eb9014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_addCluster
</UL>

<P><STRONG><a name="[2eb8c18]"></a>fat_allocClusterChain</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, fat.o(i.fat_allocClusterChain))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = fat_allocClusterChain &rArr; fs_getLastCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb5978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_setNextClusterAddressWBuf
<LI><a href="#[2eb5a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_giveEocMarker
<LI><a href="#[2eb5a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getSectorAddressFatEntry
<LI><a href="#[2eb5ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterAddressWBuf
<LI><a href="#[2eb89fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[2eb8a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
<LI><a href="#[2eb8b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_getLastCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb449c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
<LI><a href="#[2eb9014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_addCluster
</UL>

<P><STRONG><a name="[2eb5b94]"></a>fat_countClustersInChain</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, fat.o(i.fat_countClustersInChain))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = fat_countClustersInChain &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb8c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_LogicToDiscCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb43e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_requiredCluster
</UL>

<P><STRONG><a name="[2eb5b1c]"></a>fat_getNextClusterAddress</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, fat.o(i.fat_getNextClusterAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = fat_getNextClusterAddress &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb5a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getSectorAddressFatEntry
<LI><a href="#[2eb89fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[2eb8a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb4280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_getNextFreeCluster
</UL>

<P><STRONG><a name="[2eb5ae0]"></a>fat_getNextClusterAddressWBuf</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, fat.o(i.fat_getNextClusterAddressWBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb5a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getSectorAddressFatEntry
<LI><a href="#[2eb89fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[2eb8a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb5aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterChain
<LI><a href="#[2eb8c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_allocClusterChain
</UL>

<P><STRONG><a name="[2eb5aa4]"></a>fat_getNextClusterChain</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, fat.o(i.fat_getNextClusterChain))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb59f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_isEocMarker
<LI><a href="#[2eb5a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getSectorAddressFatEntry
<LI><a href="#[2eb5ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterAddressWBuf
<LI><a href="#[2eb89fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[2eb8a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb8b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_getLastCluster
<LI><a href="#[2eb8c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_LogicToDiscCluster
</UL>

<P><STRONG><a name="[2eb5a68]"></a>fat_getSectorAddressFatEntry</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fat.o(i.fat_getSectorAddressFatEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fat_getSectorAddressFatEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb5978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_setNextClusterAddressWBuf
<LI><a href="#[2eb59b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_setNextClusterAddress
<LI><a href="#[2eb5aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterChain
<LI><a href="#[2eb5ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterAddressWBuf
<LI><a href="#[2eb5b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterAddress
<LI><a href="#[2eb8c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_allocClusterChain
</UL>

<P><STRONG><a name="[2eb5a2c]"></a>fat_giveEocMarker</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fat.o(i.fat_giveEocMarker))
<BR><BR>[Called By]<UL><LI><a href="#[fd5a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
<LI><a href="#[2eb8c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_allocClusterChain
</UL>

<P><STRONG><a name="[2eb59f0]"></a>fat_isEocMarker</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, fat.o(i.fat_isEocMarker))
<BR><BR>[Called By]<UL><LI><a href="#[2eb5aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterChain
</UL>

<P><STRONG><a name="[2eb59b4]"></a>fat_setNextClusterAddress</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, fat.o(i.fat_setNextClusterAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = fat_setNextClusterAddress &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb5a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getSectorAddressFatEntry
<LI><a href="#[2eb89fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[2eb8a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[2eb5978]"></a>fat_setNextClusterAddressWBuf</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, fat.o(i.fat_setNextClusterAddressWBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = fat_setNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb5a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getSectorAddressFatEntry
<LI><a href="#[2eb89fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[2eb8a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb8c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_allocClusterChain
</UL>

<P><STRONG><a name="[fd5abc]"></a>file_fclose</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, file.o(i.file_fclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = file_fclose &rArr; dir_updateDirectoryEntry &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb4208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_hasTimeSupport
<LI><a href="#[2eb43ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_setAttr
<LI><a href="#[2eb4460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_getAttr
<LI><a href="#[2eb8ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memClr
<LI><a href="#[2eb8d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_updateDirectoryEntry
<LI><a href="#[2eb8d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_setFileSize
</UL>
<BR>[Called By]<UL><LI><a href="#[27d5a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_wr
<LI><a href="#[27d5ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_rd
</UL>

<P><STRONG><a name="[fd5a80]"></a>file_fopen</STRONG> (Thumb, 634 bytes, Stack size 80 bytes, file.o(i.file_fopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = file_fopen &rArr; fs_findFreeFile &rArr; fs_findFile &rArr; dir_findinDir &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb41cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_setFirstClusterInDirEntry
<LI><a href="#[2eb4244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_giveFreeClusterHint
<LI><a href="#[2eb4280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_getNextFreeCluster
<LI><a href="#[2eb42bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFreeFile
<LI><a href="#[2eb42f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFile
<LI><a href="#[2eb4370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_setpos
<LI><a href="#[2eb43ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_setAttr
<LI><a href="#[2eb4424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_initFile
<LI><a href="#[2eb59b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_setNextClusterAddress
<LI><a href="#[2eb5a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_giveEocMarker
<LI><a href="#[2eb8a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCpy
<LI><a href="#[2eb8aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initClusterChain
<LI><a href="#[2eb8d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_setFirstCluster
<LI><a href="#[2eb8dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_getFileStructure
<LI><a href="#[2eb8df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_getFatFileName
<LI><a href="#[2eb8f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_createDirectoryEntry
<LI><a href="#[2eb8fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_createDefaultEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[27d59c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_write
<LI><a href="#[27d59fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_read
</UL>

<P><STRONG><a name="[2eb44d8]"></a>file_fread</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, file.o(i.file_fread))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = file_fread &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb4190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_directSectorRead
<LI><a href="#[2eb4460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_getAttr
<LI><a href="#[2eb89fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[2eb8a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
<LI><a href="#[2eb8a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCpy
<LI><a href="#[2eb8b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_clusterToSector
<LI><a href="#[2eb8c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_LogicToDiscCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
</UL>

<P><STRONG><a name="[2eb449c]"></a>file_fwrite</STRONG> (Thumb, 352 bytes, Stack size 80 bytes, file.o(i.file_fwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = file_fwrite &rArr; file_requiredCluster &rArr; fat_countClustersInChain &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb4154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_directSectorWrite
<LI><a href="#[2eb43e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_requiredCluster
<LI><a href="#[2eb4460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_getAttr
<LI><a href="#[2eb89fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[2eb8a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
<LI><a href="#[2eb8a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCpy
<LI><a href="#[2eb8b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_clusterToSector
<LI><a href="#[2eb8c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_allocClusterChain
<LI><a href="#[2eb8c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_LogicToDiscCluster
<LI><a href="#[2eb8d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_setFileSize
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
</UL>

<P><STRONG><a name="[2eb4460]"></a>file_getAttr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, file.o(i.file_getAttr))
<BR><BR>[Called By]<UL><LI><a href="#[fd5abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fclose
<LI><a href="#[2eb449c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
<LI><a href="#[2eb44d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fread
</UL>

<P><STRONG><a name="[2eb4424]"></a>file_initFile</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, file.o(i.file_initFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = file_initFile
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[2eb8bdc]"></a>file_normalToFatName</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, file.o(i.file_normalToFatName))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = file_normalToFatName
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb4334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_validateChar
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb42f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFile
<LI><a href="#[2eb8df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_getFatFileName
</UL>

<P><STRONG><a name="[fd5a44]"></a>file_read</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, file.o(i.file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = file_read &rArr; file_fread &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb44d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fread
</UL>
<BR>[Called By]<UL><LI><a href="#[27d5894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_next_block
</UL>

<P><STRONG><a name="[2eb43e8]"></a>file_requiredCluster</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, file.o(i.file_requiredCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = file_requiredCluster &rArr; fat_countClustersInChain &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb5b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_countClustersInChain
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb449c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
</UL>

<P><STRONG><a name="[2eb43ac]"></a>file_setAttr</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, file.o(i.file_setAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = file_setAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
<LI><a href="#[fd5abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fclose
</UL>

<P><STRONG><a name="[2eb4370]"></a>file_setpos</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, file.o(i.file_setpos))
<BR><BR>[Called By]<UL><LI><a href="#[fd5a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[2eb4334]"></a>file_validateChar</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, file.o(i.file_validateChar))
<BR><BR>[Called By]<UL><LI><a href="#[2eb8bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_normalToFatName
</UL>

<P><STRONG><a name="[fd5a08]"></a>file_write</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, file.o(i.file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = file_write &rArr; file_fwrite &rArr; file_requiredCluster &rArr; fat_countClustersInChain &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb449c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[27d581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrq_recv_callback
</UL>

<P><STRONG><a name="[2eb8ba0]"></a>fs_clearCluster</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, fs.o(i.fs_clearCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = fs_clearCluster &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb89fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[2eb8a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
<LI><a href="#[2eb8ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memClr
<LI><a href="#[2eb8b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_clusterToSector
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb9014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_addCluster
</UL>

<P><STRONG><a name="[2eb8b64]"></a>fs_clusterToSector</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fs.o(i.fs_clusterToSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_clusterToSector
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb449c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
<LI><a href="#[2eb44d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fread
<LI><a href="#[2eb8ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_clearCluster
<LI><a href="#[2eb8eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinCluster
</UL>

<P><STRONG><a name="[2eb1ee0]"></a>fs_countDataSectors</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, fs.o(i.fs_countDataSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fs_countDataSectors
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb7e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initFs
</UL>

<P><STRONG><a name="[2eb1ea4]"></a>fs_determineFatType</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fs.o(i.fs_determineFatType))
<BR><BR>[Called By]<UL><LI><a href="#[2eb7e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initFs
</UL>

<P><STRONG><a name="[2eb42f8]"></a>fs_findFile</STRONG> (Thumb, 208 bytes, Stack size 72 bytes, fs.o(i.fs_findFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = fs_findFile &rArr; dir_findinDir &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb1df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_getFirstClusterRootDir
<LI><a href="#[2eb8bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_normalToFatName
<LI><a href="#[2eb8e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinDir
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_openDir
<LI><a href="#[fd5a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
<LI><a href="#[2eb42bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFreeFile
</UL>

<P><STRONG><a name="[2eb1e68]"></a>fs_findFirstSectorRootDir</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, fs.o(i.fs_findFirstSectorRootDir))
<BR><BR>[Called By]<UL><LI><a href="#[2eb7e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initFs
</UL>

<P><STRONG><a name="[2eb42bc]"></a>fs_findFreeFile</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, fs.o(i.fs_findFreeFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = fs_findFreeFile &rArr; fs_findFile &rArr; dir_findinDir &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb42f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFile
<LI><a href="#[2eb8df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_getFatFileName
<LI><a href="#[2eb8e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinDir
<LI><a href="#[2eb9014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_addCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[2eb1e2c]"></a>fs_flushFs</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fs.o(i.fs_flushFs))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = fs_flushFs &rArr; part_flushPart &rArr; ioman_flushRange &rArr; ioman_flushSector &rArr; ioman_writeSector &rArr; if_writeBuf &rArr; sd_writeSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb1c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_flushPart
</UL>
<BR>[Called By]<UL><LI><a href="#[fd59cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_umount
</UL>

<P><STRONG><a name="[2eb1df0]"></a>fs_getFirstClusterRootDir</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fs.o(i.fs_getFirstClusterRootDir))
<BR><BR>[Called By]<UL><LI><a href="#[2eb1d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initCurrentDir
<LI><a href="#[2eb42f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFile
</UL>

<P><STRONG><a name="[2eb8b28]"></a>fs_getLastCluster</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fs.o(i.fs_getLastCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = fs_getLastCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb5aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterChain
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb8c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_allocClusterChain
<LI><a href="#[2eb9014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_addCluster
</UL>

<P><STRONG><a name="[2eb4280]"></a>fs_getNextFreeCluster</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fs.o(i.fs_getNextFreeCluster))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = fs_getNextFreeCluster &rArr; fat_getNextClusterAddress &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb5b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[2eb4244]"></a>fs_giveFreeClusterHint</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs.o(i.fs_giveFreeClusterHint))
<BR><BR>[Called By]<UL><LI><a href="#[fd5a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[2eb4208]"></a>fs_hasTimeSupport</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, time.o(i.fs_hasTimeSupport))
<BR><BR>[Called By]<UL><LI><a href="#[fd5abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fclose
</UL>

<P><STRONG><a name="[2eb8aec]"></a>fs_initClusterChain</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs.o(i.fs_initClusterChain))
<BR><BR>[Called By]<UL><LI><a href="#[fd5954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_openDir
<LI><a href="#[fd5a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
<LI><a href="#[2eb9014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_addCluster
</UL>

<P><STRONG><a name="[2eb1d78]"></a>fs_initCurrentDir</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, fs.o(i.fs_initCurrentDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fs_initCurrentDir
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb1df0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_getFirstClusterRootDir
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb7e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initFs
</UL>

<P><STRONG><a name="[2eb7e80]"></a>fs_initFs</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fs.o(i.fs_initFs))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = fs_initFs &rArr; fs_loadVolumeId &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb1c4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_verifySanity
<LI><a href="#[2eb1d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_loadVolumeId
<LI><a href="#[2eb1d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_isValidFat
<LI><a href="#[2eb1d78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initCurrentDir
<LI><a href="#[2eb1e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFirstSectorRootDir
<LI><a href="#[2eb1ea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_determineFatType
<LI><a href="#[2eb1ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_countDataSectors
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
</UL>

<P><STRONG><a name="[2eb1d3c]"></a>fs_isValidFat</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fs.o(i.fs_isValidFat))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = fs_isValidFat &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb7340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_getb16
<LI><a href="#[2eb89fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[2eb8a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb7e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initFs
</UL>

<P><STRONG><a name="[2eb1d00]"></a>fs_loadVolumeId</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, fs.o(i.fs_loadVolumeId))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = fs_loadVolumeId &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb7304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_getb32
<LI><a href="#[2eb7340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ex_getb16
<LI><a href="#[2eb89fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
<LI><a href="#[2eb8a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb7e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initFs
</UL>

<P><STRONG><a name="[2eb41cc]"></a>fs_setFirstClusterInDirEntry</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs.o(i.fs_setFirstClusterInDirEntry))
<BR><BR>[Called By]<UL><LI><a href="#[fd5a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
</UL>

<P><STRONG><a name="[fd59cc]"></a>fs_umount</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fs.o(i.fs_umount))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = fs_umount &rArr; fs_flushFs &rArr; part_flushPart &rArr; ioman_flushRange &rArr; ioman_flushSector &rArr; ioman_writeSector &rArr; if_writeBuf &rArr; sd_writeSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb1e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flushFs
</UL>
<BR>[Called By]<UL><LI><a href="#[27d5a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_wr
<LI><a href="#[27d5ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_rd
</UL>

<P><STRONG><a name="[2eb1c4c]"></a>fs_verifySanity</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, fs.o(i.fs_verifySanity))
<BR><BR>[Called By]<UL><LI><a href="#[2eb7e80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initFs
</UL>

<P><STRONG><a name="[2f3273c]"></a>get_spi_BaudRatePrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sd.o(i.get_spi_BaudRatePrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[2f3255c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_getDriveSize
</UL>

<P><STRONG><a name="[2e9a56c]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2e99cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[2e98028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2e9a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[2e99bd0]"></a>icmp_input</STRONG> (Thumb, 552 bytes, Stack size 48 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fd7cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2ddd98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[2ddeb20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2ddebd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[2e99b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[2e99b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[2e9d794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[2e98028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[2e99b94]"></a>icmp_time_exceeded</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_time_exceeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2e99cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9600c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[2eb7e44]"></a>if_initInterface</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sd_stm32.o(i.if_initInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = if_initInterface &rArr; sd_getDriveSize &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2f316d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiInit
<LI><a href="#[2f3255c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_getDriveSize
<LI><a href="#[2f32598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_State
<LI><a href="#[2f32688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
</UL>

<P><STRONG><a name="[2eae394]"></a>if_readBuf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sd_stm32.o(i.if_readBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2f32520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_readSector
</UL>
<BR>[Called By]<UL><LI><a href="#[2eae538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_readSector
</UL>

<P><STRONG><a name="[2f316d4]"></a>if_spiInit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sd_stm32.o(i.if_spiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = if_spiInit &rArr; SPI_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[27d1ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2f3183c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_if_spiSend
<LI><a href="#[2f31878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb7e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_initInterface
</UL>

<P><STRONG><a name="[2f3246c]"></a>if_spiSend</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sd_stm32.o(i.if_spiSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[27d1ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[27d1be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2d04340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[2d0437c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[2d04430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f324e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_writeSector
<LI><a href="#[2f32520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_readSector
<LI><a href="#[2f3255c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_getDriveSize
<LI><a href="#[2f32610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp8b
<LI><a href="#[2f3264c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp16b
<LI><a href="#[2f326c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Command_crc
<LI><a href="#[2f32700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Command
</UL>

<P><STRONG><a name="[2eae358]"></a>if_writeBuf</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sd_stm32.o(i.if_writeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = if_writeBuf &rArr; sd_writeSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2f324e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_writeSector
</UL>
<BR>[Called By]<UL><LI><a href="#[2eae3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_writeSector
</UL>

<P><STRONG><a name="[2e99b58]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[2e98e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2e97fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[2e97fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[2e98028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2e99bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[2e99cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>

<P><STRONG><a name="[2e99b1c]"></a>inet_chksum_pbuf</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[2e98e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2e99bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[2e9d7d0]"></a>inet_chksum_pseudo</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, inet_chksum.o(i.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[27d40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2e98e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2de5114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2e9a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[2e9bfe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[2e9d6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[2e9d80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2e9e8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[2e9e9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2e9ea18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[2eaea60]"></a>ioman_decUseCnt</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ioman.o(i.ioman_decUseCnt))
<BR><BR>[Called By]<UL><LI><a href="#[2eb82f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_releaseSector
</UL>

<P><STRONG><a name="[2eaea24]"></a>ioman_directSectorRead</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ioman.o(i.ioman_directSectorRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ioman_directSectorRead &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eae538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_readSector
<LI><a href="#[2eae574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_putSectorInCache
<LI><a href="#[2eae754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getPtr
<LI><a href="#[2eae934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findSectorInCache
<LI><a href="#[2eae9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findFreeSpot
<LI><a href="#[2eb8a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb4190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_directSectorRead
</UL>

<P><STRONG><a name="[2eae9e8]"></a>ioman_directSectorWrite</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ioman.o(i.ioman_directSectorWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ioman_directSectorWrite &rArr; ioman_writeSector &rArr; if_writeBuf &rArr; sd_writeSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eae3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_writeSector
<LI><a href="#[2eae40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_setAttr
<LI><a href="#[2eae4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_resetCacheItem
<LI><a href="#[2eae754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getPtr
<LI><a href="#[2eae934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findSectorInCache
<LI><a href="#[2eae9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findFreeSpot
<LI><a href="#[2eb8a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb4154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_directSectorWrite
</UL>

<P><STRONG><a name="[2eae9ac]"></a>ioman_findFreeSpot</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, ioman.o(i.ioman_findFreeSpot))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ioman_findFreeSpot &rArr; ioman_getAttr
</UL>
<BR>[Calls]<UL><LI><a href="#[2eae808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[2eae9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorWrite
<LI><a href="#[2eaea24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorRead
<LI><a href="#[2eb8330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
</UL>

<P><STRONG><a name="[2eae970]"></a>ioman_findOverallocableSpot</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ioman.o(i.ioman_findOverallocableSpot))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ioman_findOverallocableSpot &rArr; ioman_getAttr
</UL>
<BR>[Calls]<UL><LI><a href="#[2eae718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getRefCnt
<LI><a href="#[2eae808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb8330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
</UL>

<P><STRONG><a name="[2eae934]"></a>ioman_findSectorInCache</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ioman.o(i.ioman_findSectorInCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ioman_findSectorInCache &rArr; ioman_getAttr
</UL>
<BR>[Calls]<UL><LI><a href="#[2eae808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[2eae9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorWrite
<LI><a href="#[2eaea24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorRead
<LI><a href="#[2eb8330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
</UL>

<P><STRONG><a name="[2eae8f8]"></a>ioman_findUnusedSpot</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ioman.o(i.ioman_findUnusedSpot))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ioman_findUnusedSpot &rArr; ioman_getAttr
</UL>
<BR>[Calls]<UL><LI><a href="#[2eae6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getUseCnt
<LI><a href="#[2eae718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getRefCnt
<LI><a href="#[2eae808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb8330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
</UL>

<P><STRONG><a name="[2eae880]"></a>ioman_flushRange</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ioman.o(i.ioman_flushRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ioman_flushRange &rArr; ioman_flushSector &rArr; ioman_writeSector &rArr; if_writeBuf &rArr; sd_writeSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eae40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_setAttr
<LI><a href="#[2eae808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getAttr
<LI><a href="#[2eae844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushSector
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb1c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_flushPart
</UL>

<P><STRONG><a name="[2eae844]"></a>ioman_flushSector</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ioman.o(i.ioman_flushSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ioman_flushSector &rArr; ioman_writeSector &rArr; if_writeBuf &rArr; sd_writeSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eae3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_writeSector
<LI><a href="#[2eae40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_setAttr
<LI><a href="#[2eae754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getPtr
<LI><a href="#[2eae808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[2eae880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushRange
<LI><a href="#[2eb82f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_releaseSector
<LI><a href="#[2eb8330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
</UL>

<P><STRONG><a name="[2eae808]"></a>ioman_getAttr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ioman.o(i.ioman_getAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ioman_getAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[2eae844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushSector
<LI><a href="#[2eae880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushRange
<LI><a href="#[2eae8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findUnusedSpot
<LI><a href="#[2eae934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findSectorInCache
<LI><a href="#[2eae970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findOverallocableSpot
<LI><a href="#[2eae9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findFreeSpot
<LI><a href="#[2eb82f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_releaseSector
<LI><a href="#[2eb8330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
</UL>

<P><STRONG><a name="[2eae7cc]"></a>ioman_getBp</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ioman.o(i.ioman_getBp))
<BR><BR>[Called By]<UL><LI><a href="#[2eb82f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_releaseSector
</UL>

<P><STRONG><a name="[2eae790]"></a>ioman_getBuffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ioman.o(i.ioman_getBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[2eb7e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_init
</UL>

<P><STRONG><a name="[2eae754]"></a>ioman_getPtr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ioman.o(i.ioman_getPtr))
<BR><BR>[Called By]<UL><LI><a href="#[2eae574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_putSectorInCache
<LI><a href="#[2eae844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushSector
<LI><a href="#[2eae9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorWrite
<LI><a href="#[2eaea24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorRead
<LI><a href="#[2eb8330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
</UL>

<P><STRONG><a name="[2eae718]"></a>ioman_getRefCnt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ioman.o(i.ioman_getRefCnt))
<BR><BR>[Called By]<UL><LI><a href="#[2eae8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findUnusedSpot
<LI><a href="#[2eae970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findOverallocableSpot
</UL>

<P><STRONG><a name="[2eb8330]"></a>ioman_getSector</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, ioman.o(i.ioman_getSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eae40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_setAttr
<LI><a href="#[2eae4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_resetCacheItem
<LI><a href="#[2eae574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_putSectorInCache
<LI><a href="#[2eae5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_push
<LI><a href="#[2eae664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_incUseCnt
<LI><a href="#[2eae6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_incRefCnt
<LI><a href="#[2eae754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getPtr
<LI><a href="#[2eae808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getAttr
<LI><a href="#[2eae844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushSector
<LI><a href="#[2eae8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findUnusedSpot
<LI><a href="#[2eae934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findSectorInCache
<LI><a href="#[2eae970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findOverallocableSpot
<LI><a href="#[2eae9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findFreeSpot
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb83a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disc_loadMBR
<LI><a href="#[2eb8a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>

<P><STRONG><a name="[2eae6dc]"></a>ioman_getUseCnt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ioman.o(i.ioman_getUseCnt))
<BR><BR>[Called By]<UL><LI><a href="#[2eae8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_findUnusedSpot
<LI><a href="#[2eb82f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_releaseSector
</UL>

<P><STRONG><a name="[2eae6a0]"></a>ioman_incRefCnt</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ioman.o(i.ioman_incRefCnt))
<BR><BR>[Called By]<UL><LI><a href="#[2eb8330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
</UL>

<P><STRONG><a name="[2eae664]"></a>ioman_incUseCnt</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ioman.o(i.ioman_incUseCnt))
<BR><BR>[Called By]<UL><LI><a href="#[2eb8330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
</UL>

<P><STRONG><a name="[2eb7e08]"></a>ioman_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ioman.o(i.ioman_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ioman_init &rArr; ioman_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2eae4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_reset
<LI><a href="#[2eae790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
</UL>

<P><STRONG><a name="[2eae628]"></a>ioman_pop</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, ioman.o(i.ioman_pop))
<BR><BR>[Called By]<UL><LI><a href="#[2eb82f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_releaseSector
</UL>

<P><STRONG><a name="[2eae5b0]"></a>ioman_push</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, ioman.o(i.ioman_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ioman_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb8330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
</UL>

<P><STRONG><a name="[2eae574]"></a>ioman_putSectorInCache</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ioman.o(i.ioman_putSectorInCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eae40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_setAttr
<LI><a href="#[2eae538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_readSector
<LI><a href="#[2eae754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[2eaea24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorRead
<LI><a href="#[2eb82f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_releaseSector
<LI><a href="#[2eb8330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
</UL>

<P><STRONG><a name="[2eae538]"></a>ioman_readSector</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ioman.o(i.ioman_readSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eae394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_readBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2eae574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_putSectorInCache
<LI><a href="#[2eaea24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorRead
</UL>

<P><STRONG><a name="[2eb82f4]"></a>ioman_releaseSector</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ioman.o(i.ioman_releaseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ioman_releaseSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eae574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_putSectorInCache
<LI><a href="#[2eae628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_pop
<LI><a href="#[2eae6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getUseCnt
<LI><a href="#[2eae7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getBp
<LI><a href="#[2eae808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getAttr
<LI><a href="#[2eae844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushSector
<LI><a href="#[2eaea60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_decUseCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb83a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disc_loadMBR
<LI><a href="#[2eb89fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_relSect
</UL>

<P><STRONG><a name="[2eae4fc]"></a>ioman_reset</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ioman.o(i.ioman_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ioman_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb8ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memClr
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb7e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_init
</UL>

<P><STRONG><a name="[2eae4c0]"></a>ioman_resetCacheItem</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ioman.o(i.ioman_resetCacheItem))
<BR><BR>[Called By]<UL><LI><a href="#[2eae9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorWrite
<LI><a href="#[2eb8330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
</UL>

<P><STRONG><a name="[2eae40c]"></a>ioman_setAttr</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, ioman.o(i.ioman_setAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ioman_setAttr
</UL>
<BR>[Called By]<UL><LI><a href="#[2eae574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_putSectorInCache
<LI><a href="#[2eae844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushSector
<LI><a href="#[2eae880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushRange
<LI><a href="#[2eae9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorWrite
<LI><a href="#[2eb8330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
</UL>

<P><STRONG><a name="[2eae3d0]"></a>ioman_writeSector</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ioman.o(i.ioman_writeSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ioman_writeSector &rArr; if_writeBuf &rArr; sd_writeSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eae358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_writeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2eae844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushSector
<LI><a href="#[2eae9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorWrite
</UL>

<P><STRONG><a name="[2e9d794]"></a>ip4_addr_isbroadcast</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip_addr.o(i.ip4_addr_isbroadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip4_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[2de5330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2e935dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[2e938ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[2e98028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2e99bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[2e9a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[2e9d80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[2e97fec]"></a>ip_frag</STRONG> (Thumb, 438 bytes, Stack size 96 bytes, ip_frag.o(i.ip_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fd7cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[27d4070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[27d40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2ddea6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[2ddecc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[2dded00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[2e960fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[2e96138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[2e99b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ddd98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[2e98028]"></a>ip_input</STRONG> (Thumb, 590 bytes, Stack size 40 bytes, ip.o(i.ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[27d4070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[2dddb6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[2de518c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2e97fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[2e99b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[2e99bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[2e9a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[2e9a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[2e9d794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[2e9d80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>
<BR>[Called By]<UL><LI><a href="#[fe055c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[2e9be44]"></a>ip_output</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, ip.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2ddd950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[2ddd98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[2e99cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[2e9bfe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[2e9d6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[2e9e8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[2e9e9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2e9ea18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[2ddd98c]"></a>ip_output_if</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, ip.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[27d40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2ddeb20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2e97fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>
<BR>[Called By]<UL><LI><a href="#[2de5114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2e99bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[2e9be44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>

<P><STRONG><a name="[2e97fb0]"></a>ip_reass</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, ip_frag.o(i.ip_reass))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = ip_reass &rArr; ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[27d4070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[27d40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2ddeb20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2ddec4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[2ddecc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[2e95fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[2e96048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[2e96084]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[2e960c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[2e99b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e98028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[2ddd950]"></a>ip_route</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ip.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[fd7b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[2dd93b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[2e9be44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[2e9bfe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
</UL>

<P><STRONG><a name="[fd5954]"></a>ls_openDir</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, ls.o(i.ls_openDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ls_openDir &rArr; fs_findFile &rArr; dir_findinDir &rArr; fat_LogicToDiscCluster &rArr; fat_getNextClusterChain &rArr; fat_getNextClusterAddressWBuf &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb42f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_findFile
<LI><a href="#[2eb8ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memClr
<LI><a href="#[2eb8aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_initClusterChain
</UL>
<BR>[Called By]<UL><LI><a href="#[27d5b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>

<P><STRONG><a name="[2d30980]"></a>lwip_htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, def.o(i.lwip_htonl))
<BR><BR>[Called By]<UL><LI><a href="#[2d30944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2de6230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2de63d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[2de644c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[2de653c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2e9bfe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[2e9c024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[2e9c060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[2e9d6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[2e9e9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2e9ea18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[27d40ac]"></a>lwip_htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, def.o(i.lwip_htons))
<BR><BR>[Called By]<UL><LI><a href="#[fd79ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[fd7a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[27d4070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[27d5678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_block
<LI><a href="#[2ddd98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[2de5114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2e93924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[2e93a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[2e97fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[2e97fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[2e9bfe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[2e9c024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[2e9c060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[2e9d7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[2e9dcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[2e9e8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[2e9e964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[2e9e9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>

<P><STRONG><a name="[2d30944]"></a>lwip_ntohl</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(i.lwip_ntohl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[2d30980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2de6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2de617c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2de61b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2de6230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2de6500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2e9bfe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[2e9d758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[2e9d80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2e9dcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[2e9dcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[27d4070]"></a>lwip_ntohs</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, def.o(i.lwip_ntohs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[27d40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[27d572c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_extract_block
<LI><a href="#[2e960c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[2e97fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[2e97fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[2e98028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2e9a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[2e9d80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2e9dcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[2e9dd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[2e9e8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[2e9e964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[27cf5e8]"></a>main</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 940<LI>Call Chain = main &rArr; LwIP_Periodic_Handle &rArr; TftpTrm250ms &rArr; tftp_send_error_message &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd812c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpTestThread
<LI><a href="#[fd8168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToSever
<LI><a href="#[fdc8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
<LI><a href="#[fe0778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
<LI><a href="#[fe07b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[27cf354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterPoll
<LI><a href="#[27cf5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModbusSenttset
<LI><a href="#[27cf660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTIM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[2eb8ab0]"></a>memClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, plibc.o(i.memClr))
<BR><BR>[Called By]<UL><LI><a href="#[fd5954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_openDir
<LI><a href="#[fd5abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fclose
<LI><a href="#[2eae4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_reset
<LI><a href="#[2eb8ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_clearCluster
<LI><a href="#[2eb8df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_getFatFileName
</UL>

<P><STRONG><a name="[2eb8a74]"></a>memCpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, plibc.o(i.memCpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
<LI><a href="#[2eae9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorWrite
<LI><a href="#[2eaea24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorRead
<LI><a href="#[2eb449c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
<LI><a href="#[2eb44d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fread
<LI><a href="#[2eb8d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_updateDirectoryEntry
<LI><a href="#[2eb8df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_getFatFileName
<LI><a href="#[2eb8f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_createDirectoryEntry
<LI><a href="#[2eb8fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_createDefaultEntry
</UL>

<P><STRONG><a name="[27d57e0]"></a>mem_free</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de34f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[27d5a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_wr
<LI><a href="#[27d5ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_rd
</UL>

<P><STRONG><a name="[fe04a8]"></a>mem_init</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, mem.o(i.mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[fe07b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[27d57a4]"></a>mem_malloc</STRONG> (Thumb, 420 bytes, Stack size 20 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[fe0520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[fe05d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[27d59c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_write
<LI><a href="#[27d59fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_read
</UL>

<P><STRONG><a name="[2de3224]"></a>mem_trim</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, mem.o(i.mem_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[2de518c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[2de2324]"></a>memp_free</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, memp.o(i.memp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[27d5510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[2dd90a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[2dd91d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[2dd94a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[2dd9c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[2e96084]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[2e960fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[2e9d80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[fe046c]"></a>memp_init</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe07b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[2de22e8]"></a>memp_malloc</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, memp.o(i.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fd78f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[fd7cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2dd9468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[2e96048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[2e96138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_alloc_pbuf_custom_ref
<LI><a href="#[2e9c060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>

<P><STRONG><a name="[fe0430]"></a>netif_add</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de0b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[fe07b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[2de0b00]"></a>netif_set_addr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de5204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2de5240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2de527c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[fe0430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[fe03f4]"></a>netif_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[fe07b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
</UL>

<P><STRONG><a name="[2de52b8]"></a>netif_set_down</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, netif.o(i.netif_set_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[2de545c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2de6410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[2de527c]"></a>netif_set_gw</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[2de0b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[2de545c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2de6410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[2de65b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[2de5240]"></a>netif_set_ipaddr</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de09d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2de0b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[2de545c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2de6410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[2de65b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[2de5204]"></a>netif_set_netmask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[2de0b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[2de545c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2de6410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[2de65b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[fe03b8]"></a>netif_set_up</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de0a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[fe07b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Init
<LI><a href="#[2de65b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[2eb4190]"></a>part_directSectorRead</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, partition.o(i.part_directSectorRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = part_directSectorRead &rArr; ioman_directSectorRead &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eaea24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorRead
<LI><a href="#[2f35a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getRealLBA
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb44d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fread
</UL>

<P><STRONG><a name="[2eb4154]"></a>part_directSectorWrite</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, partition.o(i.part_directSectorWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = part_directSectorWrite &rArr; ioman_directSectorWrite &rArr; ioman_writeSector &rArr; if_writeBuf &rArr; sd_writeSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eae9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_directSectorWrite
<LI><a href="#[2f35a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getRealLBA
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb449c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
</UL>

<P><STRONG><a name="[2eb1c10]"></a>part_flushPart</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, partition.o(i.part_flushPart))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = part_flushPart &rArr; ioman_flushRange &rArr; ioman_flushSector &rArr; ioman_writeSector &rArr; if_writeBuf &rArr; sd_writeSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eae880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_flushRange
<LI><a href="#[2f35a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getRealLBA
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb1e2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flushFs
</UL>

<P><STRONG><a name="[2f35a18]"></a>part_getRealLBA</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, partition.o(i.part_getRealLBA))
<BR><BR>[Called By]<UL><LI><a href="#[2eb1c10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_flushPart
<LI><a href="#[2eb4154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_directSectorWrite
<LI><a href="#[2eb4190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_directSectorRead
<LI><a href="#[2eb8a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getSect
</UL>

<P><STRONG><a name="[2eb8a38]"></a>part_getSect</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, partition.o(i.part_getSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb8330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_getSector
<LI><a href="#[2f35a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_getRealLBA
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb1d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_loadVolumeId
<LI><a href="#[2eb1d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_isValidFat
<LI><a href="#[2eb449c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
<LI><a href="#[2eb44d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fread
<LI><a href="#[2eb5978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_setNextClusterAddressWBuf
<LI><a href="#[2eb59b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_setNextClusterAddress
<LI><a href="#[2eb5aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterChain
<LI><a href="#[2eb5ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterAddressWBuf
<LI><a href="#[2eb5b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterAddress
<LI><a href="#[2eb8ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_clearCluster
<LI><a href="#[2eb8c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_allocClusterChain
<LI><a href="#[2eb8d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_updateDirectoryEntry
<LI><a href="#[2eb8d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_setFirstCluster
<LI><a href="#[2eb8d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_setFileSize
<LI><a href="#[2eb8dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_getFileStructure
<LI><a href="#[2eb8e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinRootArea
<LI><a href="#[2eb8eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinCluster
<LI><a href="#[2eb8f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_createDirectoryEntry
</UL>

<P><STRONG><a name="[2eb7dcc]"></a>part_initPartition</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, partition.o(i.part_initPartition))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = part_initPartition
</UL>
<BR>[Calls]<UL><LI><a href="#[2f359dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_isFatPart
</UL>
<BR>[Called By]<UL><LI><a href="#[fd5af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
</UL>

<P><STRONG><a name="[2f359dc]"></a>part_isFatPart</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, partition.o(i.part_isFatPart))
<BR><BR>[Called By]<UL><LI><a href="#[2eb7dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_initPartition
</UL>

<P><STRONG><a name="[2eb89fc]"></a>part_relSect</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, partition.o(i.part_relSect))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = part_relSect &rArr; ioman_releaseSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb82f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioman_releaseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb1d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_loadVolumeId
<LI><a href="#[2eb1d3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_isValidFat
<LI><a href="#[2eb449c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fwrite
<LI><a href="#[2eb44d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fread
<LI><a href="#[2eb5978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_setNextClusterAddressWBuf
<LI><a href="#[2eb59b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_setNextClusterAddress
<LI><a href="#[2eb5aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterChain
<LI><a href="#[2eb5ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterAddressWBuf
<LI><a href="#[2eb5b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_getNextClusterAddress
<LI><a href="#[2eb8ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_clearCluster
<LI><a href="#[2eb8c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_allocClusterChain
<LI><a href="#[2eb8d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_updateDirectoryEntry
<LI><a href="#[2eb8d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_setFirstCluster
<LI><a href="#[2eb8d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_setFileSize
<LI><a href="#[2eb8dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_getFileStructure
<LI><a href="#[2eb8e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinRootArea
<LI><a href="#[2eb8eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findinCluster
<LI><a href="#[2eb8f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_createDirectoryEntry
</UL>

<P><STRONG><a name="[fd7cf4]"></a>pbuf_alloc</STRONG> (Thumb, 530 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[27d57a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[2de22e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fd79ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[fd7ed4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_callback
<LI><a href="#[27d58d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_message
<LI><a href="#[2de5114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de5330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2de653c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[2e924c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[2e93924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[2e97fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[2e99bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[2e99cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[2e9bfac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[2e9c024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[2e9e9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2e9ea54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[2dded00]"></a>pbuf_alloced_custom</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, pbuf.o(i.pbuf_alloced_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pbuf_alloced_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[2e97fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[2ddecc4]"></a>pbuf_cat</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[fd79ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2ddec88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[2e97fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[2e97fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[2ddec88]"></a>pbuf_chain</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pbuf_chain &rArr; pbuf_cat
</UL>
<BR>[Calls]<UL><LI><a href="#[2ddea6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[2ddecc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[2de5114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[2ddec4c]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[fd79ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2e9600c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[2e960c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[2e97fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[2e9dcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[2e9ea54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[2ddebd4]"></a>pbuf_copy</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pbuf_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2de5330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2e99bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[2de51c8]"></a>pbuf_copy_partial</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_copy_partial
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2de6230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2e9e8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
</UL>

<P><STRONG><a name="[fd7cb8]"></a>pbuf_free</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[27d57e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[2de2324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fd79ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[fd7cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[fd7ed4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_callback
<LI><a href="#[fd7f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_reciver
<LI><a href="#[fe04e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[fe055c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[27d581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrq_recv_callback
<LI><a href="#[27d58d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_message
<LI><a href="#[27d5aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rrq_recv_callback
<LI><a href="#[27d5b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_callback_tftp
<LI><a href="#[2dd91d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[2dd9210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[2dd9300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[2de5114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de518c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2de5330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2de617c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[2de64c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2e938ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[2e93924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[2e9399c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[2e93a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[2e95f94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[2e9600c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[2e960c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[2e97fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[2e97fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[2e98028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2e99bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[2e99cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[2e9a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[2e9c060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[2e9d6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[2e9d80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2e9e8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[2e9e9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2e9ea18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[2ddeb20]"></a>pbuf_header</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[fe055c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[2ddd98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[2de5114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2e935dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[2e97fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[2e99bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[2e9a5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[2e9c060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[2e9d80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2e9dcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[2de518c]"></a>pbuf_realloc</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2de3224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[2de5420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2de545c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2de6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2de61b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2de61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2de6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2de6500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2e98028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[2e9dcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[2ddea6c]"></a>pbuf_ref</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Called By]<UL><LI><a href="#[2ddec88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[2de5330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2e97fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[27d5b64]"></a>process_tftp_request</STRONG> (Thumb, 376 bytes, Stack size 64 bytes, tftpserver.o(i.process_tftp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 1044<LI>Call Chain = process_tftp_request &rArr; tftp_process_read &rArr; tftp_send_next_block &rArr; tftp_send_data_packet &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd5954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_openDir
<LI><a href="#[fd5af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;efs_init
<LI><a href="#[fd78bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[fd78f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[fd7934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[27d5510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[27d56f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_extract_filename
<LI><a href="#[27d5768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_decode_op
<LI><a href="#[27d590c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error_message
<LI><a href="#[27d59c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_write
<LI><a href="#[27d59fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_read
</UL>
<BR>[Called By]<UL><LI><a href="#[27d5b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_callback_tftp
</UL>

<P><STRONG><a name="[2dddb6c]"></a>raw_input</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[2e98028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[27d5b28]"></a>recv_callback_tftp</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tftpserver.o(i.recv_callback_tftp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068<LI>Call Chain = recv_callback_tftp &rArr; process_tftp_request &rArr; tftp_process_read &rArr; tftp_send_next_block &rArr; tftp_send_data_packet &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[27d5b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>
<BR>[Address Reference Count : 3]<UL><LI> tftpserver.o(i.process_tftp_request)
<LI> tftpserver.o(i.tftp_cleanup_rd)
<LI> tftpserver.o(i.tftp_cleanup_wr)
</UL>
<P><STRONG><a name="[27d5aec]"></a>rrq_recv_callback</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, tftpserver.o(i.rrq_recv_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 988<LI>Call Chain = rrq_recv_callback &rArr; tftp_send_next_block &rArr; tftp_send_data_packet &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[27d56b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_is_correct_ack
<LI><a href="#[27d5894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_next_block
<LI><a href="#[27d5ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_rd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tftpserver.o(i.tftp_process_read)
</UL>
<P><STRONG><a name="[2f32700]"></a>sd_Command</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, sd.o(i.sd_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3246c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2f324e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_writeSector
<LI><a href="#[2f32520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_readSector
<LI><a href="#[2f3255c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_getDriveSize
<LI><a href="#[2f32598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_State
<LI><a href="#[2f32688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Init
</UL>

<P><STRONG><a name="[2f326c4]"></a>sd_Command_crc</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, sd.o(i.sd_Command_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sd_Command_crc &rArr; crc7
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3246c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
<LI><a href="#[2f32dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc7
</UL>
<BR>[Called By]<UL><LI><a href="#[2f32688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Init
</UL>

<P><STRONG><a name="[2f32688]"></a>sd_Init</STRONG> (Thumb, 626 bytes, Stack size 32 bytes, sd.o(i.sd_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sd_Init &rArr; sd_Command_crc &rArr; crc7
</UL>
<BR>[Calls]<UL><LI><a href="#[2f325d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp8bError
<LI><a href="#[2f32610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp8b
<LI><a href="#[2f326c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Command_crc
<LI><a href="#[2f32700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb7e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_initInterface
</UL>

<P><STRONG><a name="[2f3264c]"></a>sd_Resp16b</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sd.o(i.sd_Resp16b))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sd_Resp16b &rArr; sd_Resp8b &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3246c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
<LI><a href="#[2f32610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp8b
</UL>
<BR>[Called By]<UL><LI><a href="#[2f32598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_State
</UL>

<P><STRONG><a name="[2f32610]"></a>sd_Resp8b</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sd.o(i.sd_Resp8b))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sd_Resp8b &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3246c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2f324e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_writeSector
<LI><a href="#[2f32520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_readSector
<LI><a href="#[2f3255c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_getDriveSize
<LI><a href="#[2f3264c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp16b
<LI><a href="#[2f32688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Init
</UL>

<P><STRONG><a name="[2f325d4]"></a>sd_Resp8bError</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, sd.o(i.sd_Resp8bError))
<BR><BR>[Called By]<UL><LI><a href="#[2f32520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_readSector
<LI><a href="#[2f32598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_State
<LI><a href="#[2f32688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Init
</UL>

<P><STRONG><a name="[2f32598]"></a>sd_State</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sd.o(i.sd_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sd_State &rArr; sd_Resp16b &rArr; sd_Resp8b &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2f325d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp8bError
<LI><a href="#[2f3264c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp16b
<LI><a href="#[2f32700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb7e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_initInterface
</UL>

<P><STRONG><a name="[2f3255c]"></a>sd_getDriveSize</STRONG> (Thumb, 340 bytes, Stack size 72 bytes, sd.o(i.sd_getDriveSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sd_getDriveSize &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3246c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
<LI><a href="#[2f32610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp8b
<LI><a href="#[2f32700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Command
<LI><a href="#[2f3273c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_spi_BaudRatePrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb7e44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_initInterface
</UL>

<P><STRONG><a name="[2f32520]"></a>sd_readSector</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, sd.o(i.sd_readSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3246c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
<LI><a href="#[2f325d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp8bError
<LI><a href="#[2f32610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp8b
<LI><a href="#[2f32700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[2eae394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_readBuf
</UL>

<P><STRONG><a name="[2f324e4]"></a>sd_writeSector</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, sd.o(i.sd_writeSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sd_writeSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3246c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiSend
<LI><a href="#[2f32610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Resp8b
<LI><a href="#[2f32700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[2eae358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_writeBuf
</UL>

<P><STRONG><a name="[2eb89c0]"></a>strMatch</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, plibc.o(i.strMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strMatch
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb8f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_findFileinBuf
</UL>

<P><STRONG><a name="[2dd94a4]"></a>tcp_abandon</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd9198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[2dd92c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[2de2324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2e9e9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[2de09d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[2e9dd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[2de09d4]"></a>tcp_abort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tcp.o(i.tcp_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd94a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd9bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[2dd9be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[2de5240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2e9d80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2e9dcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[2dd9468]"></a>tcp_alloc</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd933c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[2dd9bac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[2dd9be8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[2de22e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[2fd1a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[2e9dd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[fd7bc8]"></a>tcp_bind</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tcp_bind &rArr; tcp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd9b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[2e9e928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>
<BR>[Called By]<UL><LI><a href="#[fd803c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_callback
</UL>

<P><STRONG><a name="[fd803c]"></a>tcp_client_callback</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, client_tcpudp.o(i.tcp_client_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = tcp_client_callback &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[fd7a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[fd7b14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[fd7b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[fd7bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[fd812c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpTestThread
</UL>

<P><STRONG><a name="[fd8000]"></a>tcp_client_connected</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, client_tcpudp.o(i.tcp_client_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = tcp_client_connected &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd79ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[fd7a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> client_tcpudp.o(i.tcp_client_callback)
</UL>
<P><STRONG><a name="[fd7fc4]"></a>tcp_client_err</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, client_tcpudp.o(i.tcp_client_err))
<BR>[Address Reference Count : 1]<UL><LI> client_tcpudp.o(i.tcp_client_callback)
</UL>
<P><STRONG><a name="[fd7f4c]"></a>tcp_client_reciver</STRONG> (Thumb, 594 bytes, Stack size 56 bytes, client_tcpudp.o(i.tcp_client_reciver))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tcp_client_reciver &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd79ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[fd79e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[fd7a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[fd7b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fd7e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Getmeminf
<LI><a href="#[2fd1350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2fd1530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2fd1710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> client_tcpudp.o(i.tcp_client_callback)
</UL>
<P><STRONG><a name="[fd7b8c]"></a>tcp_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd9c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_reciver
<LI><a href="#[2dd9210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[fd7b50]"></a>tcp_connect</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, tcp.o(i.tcp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2dd933c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[2dd93b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[2dd9b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[2ddd950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[2e9e928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[2e9ea54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[fd803c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_callback
</UL>

<P><STRONG><a name="[2dd93b4]"></a>tcp_eff_send_mss</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_eff_send_mss))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[2ddd950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[2e9bfe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[2e9dcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[2e9dd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[2e9ea54]"></a>tcp_enqueue_flags</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_enqueue_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2ddec4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[2e9c060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[2e9dd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[2e9e964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[fd7b14]"></a>tcp_err</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(i.tcp_err))
<BR><BR>[Called By]<UL><LI><a href="#[fd803c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_callback
</UL>

<P><STRONG><a name="[2dd9378]"></a>tcp_fasttmr</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2dd924c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Called By]<UL><LI><a href="#[fe037c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[2e9d80c]"></a>tcp_input</STRONG> (Thumb, 1418 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[27d4070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[2d30944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2dd9210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[2dd924c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[2dd92c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[2ddeb20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2de09d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[2de2324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2e9d794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[2e9d7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[2e9dc80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[2e9dcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[2e9dd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[2e9e9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[2e98028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[2e9ea18]"></a>tcp_keepalive</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = tcp_keepalive &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2d30980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2e9be44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[2e9c024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[2e9d7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd90a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[fd7a9c]"></a>tcp_new</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tcp.o(i.tcp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd9468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fd803c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_callback
</UL>

<P><STRONG><a name="[2dd933c]"></a>tcp_next_iss</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[fd7b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[2dd9468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[fd7a60]"></a>tcp_output</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[27d4070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[27d40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2d30944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2dd91d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[2e9bfe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[2e9d6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[fd79e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[fd7b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[fd7f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_reciver
<LI><a href="#[fd8000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_connected
<LI><a href="#[fd8168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToSever
<LI><a href="#[2dd90a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[2dd92c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[2dd9378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[2dd9c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[2e9d80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2e9dc80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[2e9dd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[2e9e9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
</UL>

<P><STRONG><a name="[2dd9300]"></a>tcp_pcb_purge</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2dd9198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd90a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[2dd92c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[2dd9c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[2e9dcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[2dd92c4]"></a>tcp_pcb_remove</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2dd9300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd94a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[2dd9c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[2e9d80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[2dd924c]"></a>tcp_process_refused_data</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, tcp.o(i.tcp_process_refused_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd9210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd9378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[2e9d80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[fd7a24]"></a>tcp_recv</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[fd803c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_callback
</UL>

<P><STRONG><a name="[2dd9210]"></a>tcp_recv_null</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd79e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[fd7b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd924c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[2e9d80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[fd79e8]"></a>tcp_recved</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2dd906c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_reciver
<LI><a href="#[2dd9210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[2e9d758]"></a>tcp_rexmit</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tcp_rexmit &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[2d30944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9d71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[2e9dcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[2e9d71c]"></a>tcp_rexmit_fast</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, tcp_out.o(i.tcp_rexmit_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit &rArr; lwip_ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9d758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9dcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[2e9e9dc]"></a>tcp_rexmit_rto</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd90a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[2e9e9a0]"></a>tcp_rst</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fd7cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[27d40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2d30980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2e9be44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[2e9d7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd90a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[2dd94a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[2dd9c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[2e9d80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[2e9dc80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[2e9dcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[2e9dd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[2dd91d4]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2de2324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2dd9198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[2e9c060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[2e9dcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[2e9dcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[2dd9198]"></a>tcp_segs_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd91d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fd79ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2dd9300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[2dd94a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[2e9d6e0]"></a>tcp_send_empty_ack</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_send_empty_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2d30980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2e9be44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[2e9c024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[2e9d7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2e9dcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[2e9e964]"></a>tcp_send_fin</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_send_fin))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[27d4070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[27d40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2e9ea54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd9c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[2dd90a8]"></a>tcp_slowtmr</STRONG> (Thumb, 874 bytes, Stack size 48 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2dd9300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[2de2324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2e9e8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[2e9e9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2e9e9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[2e9ea18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>
<BR>[Called By]<UL><LI><a href="#[fe037c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[2e9e928]"></a>tcp_timer_needed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timers.o(i.tcp_timer_needed))
<BR><BR>[Called By]<UL><LI><a href="#[fd7b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[fd7bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[2dd9c24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[2e9dcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[2e9dd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[fe037c]"></a>tcp_tmr</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tcp.o(i.tcp_tmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd90a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[2dd9378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[fe0778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LwIP_Periodic_Handle
</UL>

<P><STRONG><a name="[2dd906c]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[fd79e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[2e9dcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[fd79ac]"></a>tcp_write</STRONG> (Thumb, 1094 bytes, Stack size 112 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fd7cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[27d40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2dd9198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[2ddec4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[2ddecc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[2e9bf70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write_checks
<LI><a href="#[2e9bfac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[2e9c060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7f4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_reciver
<LI><a href="#[fd8000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_client_connected
<LI><a href="#[fd8168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToSever
</UL>

<P><STRONG><a name="[2e9e8ec]"></a>tcp_zero_window_probe</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tcp_zero_window_probe &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[27d4070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[27d40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2de51c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2e9be44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[2e9c024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[2e9d7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd90a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[27d5ab0]"></a>tftp_cleanup_rd</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tftpserver.o(i.tftp_cleanup_rd))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tftp_cleanup_rd &rArr; file_fclose &rArr; dir_updateDirectoryEntry &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[fd59cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_umount
<LI><a href="#[fd5abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fclose
<LI><a href="#[fd78bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[27d5510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[27d554c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[27d57e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fe0688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpTrm250ms
<LI><a href="#[27d59fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_read
<LI><a href="#[27d5aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rrq_recv_callback
</UL>

<P><STRONG><a name="[27d5a74]"></a>tftp_cleanup_wr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tftpserver.o(i.tftp_cleanup_wr))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tftp_cleanup_wr &rArr; file_fclose &rArr; dir_updateDirectoryEntry &rArr; part_getSect &rArr; ioman_getSector &rArr; ioman_putSectorInCache &rArr; ioman_readSector &rArr; if_readBuf &rArr; sd_readSector &rArr; sd_Command &rArr; if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[fd59cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_umount
<LI><a href="#[fd5abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fclose
<LI><a href="#[fd78bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[27d5510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[27d554c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[27d57e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[27d581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrq_recv_callback
<LI><a href="#[27d59c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_write
</UL>

<P><STRONG><a name="[27d5a38]"></a>tftp_construct_error_message</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tftpserver.o(i.tftp_construct_error_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tftp_construct_error_message &rArr; tftp_set_errormsg
</UL>
<BR>[Calls]<UL><LI><a href="#[27d5588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_opcode
<LI><a href="#[27d55c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_errormsg
<LI><a href="#[27d5600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_errorcode
<LI><a href="#[2fd1710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[27d590c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error_message
</UL>

<P><STRONG><a name="[27d5768]"></a>tftp_decode_op</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tftputils.o(i.tftp_decode_op))
<BR><BR>[Called By]<UL><LI><a href="#[27d56b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_is_correct_ack
<LI><a href="#[27d5b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>

<P><STRONG><a name="[27d572c]"></a>tftp_extract_block</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tftputils.o(i.tftp_extract_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tftp_extract_block &rArr; lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[27d4070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[27d56b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_is_correct_ack
<LI><a href="#[27d581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrq_recv_callback
</UL>

<P><STRONG><a name="[27d56f0]"></a>tftp_extract_filename</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tftputils.o(i.tftp_extract_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tftp_extract_filename
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd1440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27d5b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>

<P><STRONG><a name="[27d56b4]"></a>tftp_is_correct_ack</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tftputils.o(i.tftp_is_correct_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tftp_is_correct_ack &rArr; tftp_extract_block &rArr; lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[27d572c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_extract_block
<LI><a href="#[27d5768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_decode_op
</UL>
<BR>[Called By]<UL><LI><a href="#[27d5aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rrq_recv_callback
</UL>

<P><STRONG><a name="[27d59fc]"></a>tftp_process_read</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, tftpserver.o(i.tftp_process_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 980<LI>Call Chain = tftp_process_read &rArr; tftp_send_next_block &rArr; tftp_send_data_packet &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd5a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
<LI><a href="#[fd78bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[27d57a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[27d5894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_next_block
<LI><a href="#[27d590c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error_message
<LI><a href="#[27d5ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_rd
</UL>
<BR>[Called By]<UL><LI><a href="#[27d5b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>

<P><STRONG><a name="[27d59c0]"></a>tftp_process_write</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tftpserver.o(i.tftp_process_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 940<LI>Call Chain = tftp_process_write &rArr; tftp_send_error_message &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd5a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_fopen
<LI><a href="#[fd78bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[27d57a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[27d590c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error_message
<LI><a href="#[27d5984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_ack_packet
<LI><a href="#[27d5a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[27d5b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>

<P><STRONG><a name="[27d5984]"></a>tftp_send_ack_packet</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, tftpserver.o(i.tftp_send_ack_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = tftp_send_ack_packet &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[27d5588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_opcode
<LI><a href="#[27d5678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_block
<LI><a href="#[27d58d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[27d581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrq_recv_callback
<LI><a href="#[27d59c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_write
</UL>

<P><STRONG><a name="[27d5948]"></a>tftp_send_data_packet</STRONG> (Thumb, 76 bytes, Stack size 552 bytes, tftpserver.o(i.tftp_send_data_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 924<LI>Call Chain = tftp_send_data_packet &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[27d5588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_opcode
<LI><a href="#[27d563c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_data_message
<LI><a href="#[27d5678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_set_block
<LI><a href="#[27d58d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_message
</UL>
<BR>[Called By]<UL><LI><a href="#[27d5894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_next_block
</UL>

<P><STRONG><a name="[27d590c]"></a>tftp_send_error_message</STRONG> (Thumb, 50 bytes, Stack size 544 bytes, tftpserver.o(i.tftp_send_error_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = tftp_send_error_message &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[27d58d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_message
<LI><a href="#[27d5a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_construct_error_message
</UL>
<BR>[Called By]<UL><LI><a href="#[fe0688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TftpTrm250ms
<LI><a href="#[27d581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrq_recv_callback
<LI><a href="#[27d59c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_write
<LI><a href="#[27d59fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_read
<LI><a href="#[27d5b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>

<P><STRONG><a name="[27d58d0]"></a>tftp_send_message</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, tftpserver.o(i.tftp_send_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fd7cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27d590c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error_message
<LI><a href="#[27d5948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_data_packet
<LI><a href="#[27d5984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_ack_packet
</UL>

<P><STRONG><a name="[27d5894]"></a>tftp_send_next_block</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, tftpserver.o(i.tftp_send_next_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 956<LI>Call Chain = tftp_send_next_block &rArr; tftp_send_data_packet &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd5a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_read
<LI><a href="#[27d5948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_data_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[27d59fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_read
<LI><a href="#[27d5aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rrq_recv_callback
</UL>

<P><STRONG><a name="[27d5678]"></a>tftp_set_block</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tftputils.o(i.tftp_set_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tftp_set_block
</UL>
<BR>[Calls]<UL><LI><a href="#[27d40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[27d5948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_data_packet
<LI><a href="#[27d5984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_ack_packet
</UL>

<P><STRONG><a name="[27d563c]"></a>tftp_set_data_message</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tftputils.o(i.tftp_set_data_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tftp_set_data_message
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27d5948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_data_packet
</UL>

<P><STRONG><a name="[27d5600]"></a>tftp_set_errorcode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tftputils.o(i.tftp_set_errorcode))
<BR><BR>[Called By]<UL><LI><a href="#[27d5a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_construct_error_message
</UL>

<P><STRONG><a name="[27d55c4]"></a>tftp_set_errormsg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tftputils.o(i.tftp_set_errormsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tftp_set_errormsg
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd1440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27d5a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_construct_error_message
</UL>

<P><STRONG><a name="[27d5588]"></a>tftp_set_opcode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tftputils.o(i.tftp_set_opcode))
<BR><BR>[Called By]<UL><LI><a href="#[27d5948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_data_packet
<LI><a href="#[27d5984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_ack_packet
<LI><a href="#[27d5a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_construct_error_message
</UL>

<P><STRONG><a name="[2f29010]"></a>ucMBMasterGetDestAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mb_m.o(i.ucMBMasterGetDestAddress))
<BR><BR>[Called By]<UL><LI><a href="#[27cf354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterPoll
</UL>

<P><STRONG><a name="[2f28d7c]"></a>ucMBMasterGetPDUSndLength</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbrtu_m.o(i.ucMBMasterGetPDUSndLength))
<BR><BR>[Called By]<UL><LI><a href="#[27cf354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterPoll
</UL>

<P><STRONG><a name="[fd7934]"></a>udp_bind</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9ab84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_callback_app
<LI><a href="#[fe05d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[27d5b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
<LI><a href="#[2de5114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de5150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
</UL>

<P><STRONG><a name="[fd7ed4]"></a>udp_client_callback</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, client_tcpudp.o(i.udp_client_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = udp_client_callback &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fd7cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> client_tcpudp.o(i.udp_client_callback_app)
</UL>
<P><STRONG><a name="[fd7e98]"></a>udp_client_callback_app</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, client_tcpudp.o(i.udp_client_callback_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = udp_client_callback_app &rArr; udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[fd78bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[fd78f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[fd7934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[fd812c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TcpTestThread
</UL>

<P><STRONG><a name="[2de5150]"></a>udp_connect</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = udp_connect &rArr; udp_bind &rArr; udp_new_port
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[fe05d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[27d554c]"></a>udp_disconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, udp.o(i.udp_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[27d5a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_wr
<LI><a href="#[27d5ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_rd
</UL>

<P><STRONG><a name="[2e9a5e4]"></a>udp_input</STRONG> (Thumb, 634 bytes, Stack size 56 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[27d4070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[2ddeb20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2e9a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[2e9d794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[2e9d7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[2e98028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[fd78f8]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udp_new &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2de22e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[2fd1a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_callback_app
<LI><a href="#[fe05d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[27d5b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>

<P><STRONG><a name="[fd78bc]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[fd7e98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_callback_app
<LI><a href="#[fe05d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[27d59c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_write
<LI><a href="#[27d59fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_process_read
<LI><a href="#[27d5a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_wr
<LI><a href="#[27d5ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_rd
<LI><a href="#[27d5b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
</UL>

<P><STRONG><a name="[27d5510]"></a>udp_remove</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = udp_remove &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2de2324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fe05d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[27d5a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_wr
<LI><a href="#[27d5ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_rd
<LI><a href="#[27d5b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_tftp_request
<LI><a href="#[2de53a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
</UL>

<P><STRONG><a name="[fd7880]"></a>udp_sendto</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, udp.o(i.udp_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2ddd950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[2de5114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7ed4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_client_callback
<LI><a href="#[27d58d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_message
</UL>

<P><STRONG><a name="[2de5114]"></a>udp_sendto_if</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fd7cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[27d40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2ddd98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[2ddeb20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2ddec88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[2e9d7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[2de5420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2de545c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2de6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2de61b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2de61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2de6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2de6500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[2f28d40]"></a>vMBMasterGetPDUSndBuf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbrtu_m.o(i.vMBMasterGetPDUSndBuf))
<BR><BR>[Called By]<UL><LI><a href="#[27cf354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterPoll
<LI><a href="#[2fd4c44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_Send
</UL>

<P><STRONG><a name="[2f27120]"></a>vMBMasterPortSerialEnable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, portserial_m.o(i.vMBMasterPortSerialEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vMBMasterPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[27d1ba4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[27d1be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2d3cadc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2f28bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterRTUTransmitFSM
<LI><a href="#[2f28db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUStop
<LI><a href="#[2f28df4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUStart
<LI><a href="#[2f28e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUSend
</UL>

<P><STRONG><a name="[2f270e4]"></a>vMBMasterPortTimersConvertDelayEnable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, porttimer_m.o(i.vMBMasterPortTimersConvertDelayEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vMBMasterPortTimersConvertDelayEnable &rArr; TIM_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[27cf390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[27cf3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[27cf408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[27cf480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[27cf4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[2f27210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterSetCurTimerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2f28bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterRTUTransmitFSM
</UL>

<P><STRONG><a name="[2f270a8]"></a>vMBMasterPortTimersDisable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, porttimer_m.o(i.vMBMasterPortTimersDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vMBMasterPortTimersDisable &rArr; TIM_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[27cf3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[27cf408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[27cf480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[27cf4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f28c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterRTUTimerExpired
<LI><a href="#[2f28c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterRTUReceiveFSM
<LI><a href="#[2f28db8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUStop
</UL>

<P><STRONG><a name="[2f2706c]"></a>vMBMasterPortTimersRespondTimeoutEnable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, porttimer_m.o(i.vMBMasterPortTimersRespondTimeoutEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vMBMasterPortTimersRespondTimeoutEnable &rArr; TIM_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[27cf390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[27cf3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[27cf408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[27cf480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[27cf4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[2f27210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterSetCurTimerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2f28bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterRTUTransmitFSM
</UL>

<P><STRONG><a name="[2f27030]"></a>vMBMasterPortTimersT35Enable</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, porttimer_m.o(i.vMBMasterPortTimersT35Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vMBMasterPortTimersT35Enable &rArr; TIM_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[27cf390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[27cf3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[27cf408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[27cf480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[27cf4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[2f27210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterSetCurTimerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2f28c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterRTUReceiveFSM
<LI><a href="#[2f28df4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUStart
</UL>

<P><STRONG><a name="[2f27210]"></a>vMBMasterSetCurTimerMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mbrtu_m.o(i.vMBMasterSetCurTimerMode))
<BR><BR>[Called By]<UL><LI><a href="#[2f27030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersT35Enable
<LI><a href="#[2f2706c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersRespondTimeoutEnable
<LI><a href="#[2f270e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersConvertDelayEnable
</UL>

<P><STRONG><a name="[2f28f5c]"></a>vMBMasterSetIsBusy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mb_m.o(i.vMBMasterSetIsBusy))
<BR><BR>[Called By]<UL><LI><a href="#[27cf354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterPoll
<LI><a href="#[2f28c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterRTUTimerExpired
</UL>

<P><STRONG><a name="[27d581c]"></a>wrq_recv_callback</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, tftpserver.o(i.wrq_recv_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 948<LI>Call Chain = wrq_recv_callback &rArr; tftp_send_error_message &rArr; tftp_send_message &rArr; udp_sendto &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd5a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_write
<LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[27d572c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_extract_block
<LI><a href="#[27d590c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_error_message
<LI><a href="#[27d5984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_send_ack_packet
<LI><a href="#[27d5a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tftp_cleanup_wr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tftpserver.o(i.tftp_process_write)
</UL>
<P><STRONG><a name="[2f28d04]"></a>xMBMasterPortEventGet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, portevent_m.o(i.xMBMasterPortEventGet))
<BR><BR>[Called By]<UL><LI><a href="#[27cf354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterPoll
</UL>

<P><STRONG><a name="[2f28cc8]"></a>xMBMasterPortEventInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, portevent_m.o(i.xMBMasterPortEventInit))
<BR><BR>[Called By]<UL><LI><a href="#[fdc344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterInit
</UL>

<P><STRONG><a name="[2f28c8c]"></a>xMBMasterPortEventPost</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, portevent_m.o(i.xMBMasterPortEventPost))
<BR><BR>[Called By]<UL><LI><a href="#[27cf354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterPoll
<LI><a href="#[2f28c14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterRTUTimerExpired
</UL>

<P><STRONG><a name="[2fd5a54]"></a>xMBMasterPortSerialGetByte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, portserial_m.o(i.xMBMasterPortSerialGetByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xMBMasterPortSerialGetByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3c8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[2f28c50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterRTUReceiveFSM
</UL>

<P><STRONG><a name="[2fd5a18]"></a>xMBMasterPortSerialInit</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, portserial_m.o(i.xMBMasterPortSerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xMBMasterPortSerialInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[fdc470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[fdc524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[fdc560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[fdc59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[fdc5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[27cf570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[2d3caa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[2d3cadc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[2d3cc44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[2f2715c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitCriticalSection
<LI><a href="#[2f27198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterCriticalSection
</UL>
<BR>[Called By]<UL><LI><a href="#[2f28ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUInit
</UL>

<P><STRONG><a name="[2fd59dc]"></a>xMBMasterPortSerialPutByte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, portserial_m.o(i.xMBMasterPortSerialPutByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xMBMasterPortSerialPutByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3c848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[2f28bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterRTUTransmitFSM
</UL>

<P><STRONG><a name="[2fd59a0]"></a>xMBMasterPortTimersInit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, porttimer_m.o(i.xMBMasterPortTimersInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xMBMasterPortTimersInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fdc524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[fdc560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[27cf408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[27cf480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[27cf4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[27cf534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[27cf570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f28ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eMBMasterRTUInit
</UL>

<P><STRONG><a name="[2f28c50]"></a>xMBMasterRTUReceiveFSM</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, mbrtu_m.o(i.xMBMasterRTUReceiveFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xMBMasterRTUReceiveFSM &rArr; vMBMasterPortTimersT35Enable &rArr; TIM_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2f27030]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersT35Enable
<LI><a href="#[2f270a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersDisable
<LI><a href="#[2fd5a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialGetByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_m.o(i.eMBMasterInit)
</UL>
<P><STRONG><a name="[2f28c14]"></a>xMBMasterRTUTimerExpired</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, mbrtu_m.o(i.xMBMasterRTUTimerExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xMBMasterRTUTimerExpired &rArr; vMBMasterPortTimersDisable &rArr; TIM_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2f270a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersDisable
<LI><a href="#[2f28c8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortEventPost
<LI><a href="#[2f28f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterSetIsBusy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_m.o(i.eMBMasterInit)
</UL>
<P><STRONG><a name="[2f28bd8]"></a>xMBMasterRTUTransmitFSM</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, mbrtu_m.o(i.xMBMasterRTUTransmitFSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = xMBMasterRTUTransmitFSM &rArr; vMBMasterPortSerialEnable &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2706c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersRespondTimeoutEnable
<LI><a href="#[2f270e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortTimersConvertDelayEnable
<LI><a href="#[2f27120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMBMasterPortSerialEnable
<LI><a href="#[2fd59dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xMBMasterPortSerialPutByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mb_m.o(i.eMBMasterInit)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[fdd3ac]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f107.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[fdc8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Setup
</UL>

<P><STRONG><a name="[2d32870]"></a>ETH_Delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32_eth.o(i.ETH_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[fdc6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[2de65b4]"></a>dhcp_bind</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fe03b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[2de5204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2de5240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2de527c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[2de6104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[2de6050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[2de617c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2de6578]"></a>dhcp_check</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de5330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2de6104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[2de6050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[2de617c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2de653c]"></a>dhcp_create_msg</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_create_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2d30980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2de635c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2de6398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[2de5420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2de545c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2de6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2de61b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2de61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2de6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2de6500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[2de6500]"></a>dhcp_decline</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_decline))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2d30944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2de5114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de518c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2de6104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2de626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2de62e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[2de6398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2de64c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2de653c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2de554c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[2de64c4]"></a>dhcp_delete_msg</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_delete_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2de5420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2de545c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2de6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2de61b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2de61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2de6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2de6500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[2de6488]"></a>dhcp_discover</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de5114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de518c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2de6104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2de626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2de62a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2de635c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2de6398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2de64c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2de653c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[fe05d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[2de6050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[2de6410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[2de644c]"></a>dhcp_handle_ack</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcp_handle_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[2d30980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[2de617c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2de6410]"></a>dhcp_handle_nak</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_nak))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = dhcp_handle_nak &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de5204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[2de5240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[2de527c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[2de52b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[2de6104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2de6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[2de617c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2de63d4]"></a>dhcp_handle_offer</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = dhcp_handle_offer &rArr; dhcp_select &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2d30980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2de6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
</UL>
<BR>[Called By]<UL><LI><a href="#[2de617c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2de6398]"></a>dhcp_option</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[2de5420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2de6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2de61b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2de61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2de6320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[2de6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2de6500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2de653c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[2de635c]"></a>dhcp_option_byte</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_option_byte))
<BR><BR>[Called By]<UL><LI><a href="#[2de6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2de6320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[2de6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2de653c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>

<P><STRONG><a name="[2de6320]"></a>dhcp_option_hostname</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_option_hostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_option_hostname &rArr; dhcp_option
</UL>
<BR>[Calls]<UL><LI><a href="#[2de635c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2de6398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2fd1710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2de5420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2de6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2de61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>

<P><STRONG><a name="[2de62e4]"></a>dhcp_option_long</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_long
</UL>
<BR>[Called By]<UL><LI><a href="#[2de6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2de61b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2de6500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[2de62a8]"></a>dhcp_option_short</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_short
</UL>
<BR>[Called By]<UL><LI><a href="#[2de5420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2de6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2de61b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2de61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2de6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[2de626c]"></a>dhcp_option_trailer</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_option_trailer))
<BR><BR>[Called By]<UL><LI><a href="#[2de5420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2de545c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2de6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2de61b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2de61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2de6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2de6500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[2de6230]"></a>dhcp_parse_reply</STRONG> (Thumb, 926 bytes, Stack size 80 bytes, dhcp.o(i.dhcp_parse_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dhcp_parse_reply &rArr; pbuf_copy_partial
</UL>
<BR>[Calls]<UL><LI><a href="#[2d30944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2d30980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2de51c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[2fd1a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2de617c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[2de61f4]"></a>dhcp_rebind</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_rebind))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de5114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de518c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2de6104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2de626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2de62a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2de6320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[2de6398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2de64c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2de653c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2de6050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[2de608c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_t2_timeout
</UL>

<P><STRONG><a name="[2de61b8]"></a>dhcp_reboot</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2d30944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2de5114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de518c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2de6104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2de626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2de62a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2de62e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[2de6398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2de64c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2de653c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2de6050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
</UL>

<P><STRONG><a name="[2de617c]"></a>dhcp_recv</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, dhcp.o(i.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2d30944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2de6230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[2de63d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[2de6410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[2de644c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[2de6578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[2de65b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(i.dhcp_start)
</UL>
<P><STRONG><a name="[2de6140]"></a>dhcp_select</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = dhcp_select &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2d30944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2de5114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[2de518c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2de6104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[2de626c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[2de62a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[2de62e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[2de6320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_hostname
<LI><a href="#[2de635c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[2de6398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[2de64c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[2de653c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2de6050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_timeout
<LI><a href="#[2de63d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
</UL>

<P><STRONG><a name="[2de6104]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[2de53a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[2de5420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2de545c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2de6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2de61b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2de61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2de6410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[2de6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2de6500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[2de6578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[2de65b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[2de60c8]"></a>dhcp_t1_timeout</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_t1_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = dhcp_t1_timeout &rArr; dhcp_renew &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de5420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Called By]<UL><LI><a href="#[fe064c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[2de608c]"></a>dhcp_t2_timeout</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_t2_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = dhcp_t2_timeout &rArr; dhcp_rebind &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
</UL>
<BR>[Called By]<UL><LI><a href="#[fe064c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[2de6050]"></a>dhcp_timeout</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = dhcp_timeout &rArr; dhcp_release &rArr; netif_set_ipaddr &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de5420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[2de545c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[2de6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[2de61b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[2de61f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[2de6488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[2de6578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[2de65b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[fe0610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[2de34f4]"></a>plug_holes</STRONG> (Thumb, 180 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[27d57e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[2dd9c24]"></a>tcp_close_shutdown</STRONG> (Thumb, 444 bytes, Stack size 24 bytes, tcp.o(i.tcp_close_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = tcp_close_shutdown &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2dd92c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[2dd9300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[2de2324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[2e9e928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[2e9e964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[2e9e9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7b8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[2dd9be8]"></a>tcp_kill_prio</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de09d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd9468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[2dd9bac]"></a>tcp_kill_timewait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp.o(i.tcp_kill_timewait))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de09d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd9468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[2dd9b70]"></a>tcp_new_port</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, tcp.o(i.tcp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[fd7bc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[2e9dd70]"></a>tcp_listen_input</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2dd93b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[2dd9468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[2dd94a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[2e9dd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[2e9e928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[2e9e9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[2e9ea54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9d80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[2e9dd34]"></a>tcp_parseopt</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_parseopt &rArr; lwip_ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[27d4070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9dcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[2e9dd70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[2e9dcf8]"></a>tcp_process</STRONG> (Thumb, 1470 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2d30944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2dd91d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[2dd9300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[2dd93b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[2de09d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[2e9d758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[2e9dcbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[2e9dd34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[2e9e928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[2e9e9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9d80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[2e9dcbc]"></a>tcp_receive</STRONG> (Thumb, 1790 bytes, Stack size 40 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[27d4070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[27d40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2d30944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2dd906c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[2dd91d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[2ddeb20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2ddec4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[2de518c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[2e9d6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[2e9d71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9dcf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[2e9dc80]"></a>tcp_timewait_input</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[2e9e9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9d80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[2e9c060]"></a>tcp_create_segment</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_create_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = tcp_create_segment &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[27d40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2d30980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2dd91d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[2ddeb20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[2de22e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fd79ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[2e9ea54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>

<P><STRONG><a name="[2e9c024]"></a>tcp_output_alloc_header</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_alloc_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[27d40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2d30980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9d6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[2e9e8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[2e9ea18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[2e9bfe8]"></a>tcp_output_segment</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[27d40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2d30944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohl
<LI><a href="#[2d30980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[2dd93b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[2ddd950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[2e9be44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[2e9d7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[2e9bfac]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, tcp_out.o(i.tcp_pbuf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fd79ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[2e9bf70]"></a>tcp_write_checks</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, tcp_out.o(i.tcp_write_checks))
<BR><BR>[Called By]<UL><LI><a href="#[fd79ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[2e9ab84]"></a>udp_new_port</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, udp.o(i.udp_new_port))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[fd7934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>

<P><STRONG><a name="[2e99cfc]"></a>icmp_send_response</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fd7cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2e99b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[2e9be44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e99b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[2e9a56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[2e98e38]"></a>lwip_standard_chksum</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2e99b1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[2e99b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[2e9d7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[2e96138]"></a>ip_frag_alloc_pbuf_custom_ref</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ip_frag.o(i.ip_frag_alloc_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip_frag_alloc_pbuf_custom_ref &rArr; memp_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2de22e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e97fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[2e960fc]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ip_frag.o(i.ip_frag_free_pbuf_custom_ref))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ip_frag_free_pbuf_custom_ref &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2de2324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e95f94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[2e97fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[2e960c0]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, ip_frag.o(i.ip_reass_chain_frag_into_datagram_and_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[27d4070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ntohs
<LI><a href="#[2ddec4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[2e97fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[2e96084]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ip_frag.o(i.ip_reass_dequeue_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ip_reass_dequeue_datagram &rArr; memp_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2de2324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9600c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[2e97fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[2e96048]"></a>ip_reass_enqueue_new_datagram</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ip_frag.o(i.ip_reass_enqueue_new_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de22e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[2e95fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[2fd1a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e97fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[2e9600c]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, ip_frag.o(i.ip_reass_free_complete_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2ddec4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[2e96084]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[2e99b94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e95fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
</UL>

<P><STRONG><a name="[2e95fd0]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, ip_frag.o(i.ip_reass_remove_oldest_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9600c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[2e96048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[2e97fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[2e95f94]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ip_frag.o(i.ipfrag_free_pbuf_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2e960fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ip_frag.o(i.ip_frag)
</UL>
<P><STRONG><a name="[2e93a14]"></a>etharp_arp_input</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, etharp.o(i.etharp_arp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = etharp_arp_input &rArr; dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[27d40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2de554c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[2e938ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe055c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[2e939d8]"></a>etharp_find_entry</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, etharp.o(i.etharp_find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9399c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[2de5330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2e938ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
</UL>

<P><STRONG><a name="[2e9399c]"></a>etharp_free_entry</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, etharp.o(i.etharp_free_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[fe0598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[2de0a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
<LI><a href="#[2e939d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[2e93960]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, etharp.o(i.etharp_output_to_arp_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[2de0a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[2e938e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
</UL>
<BR>[Called By]<UL><LI><a href="#[2e935dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[2e93924]"></a>etharp_raw</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[fd7cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[27d40ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2de0a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[2e938e8]"></a>etharp_send_ip</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, etharp.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = etharp_send_ip
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2de5330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[2e935dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[2e938ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[2e93960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
</UL>

<P><STRONG><a name="[2e938ac]"></a>etharp_update_arp_entry</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, etharp.o(i.etharp_update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[2e938e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[2e939d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[2e9d794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast
<LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e93a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[2e924fc]"></a>low_level_init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ethernetif.o(i.low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = low_level_init &rArr; ETH_DMATxDescChainInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d311b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
<LI><a href="#[2d32348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescChainInit
<LI><a href="#[2d324b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescReceiveITConfig
<LI><a href="#[2d32528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fe0520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[2e924c0]"></a>low_level_input</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, ethernetif.o(i.low_level_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fd7cf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe04e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[2e92484]"></a>low_level_output</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ethernetif.o(i.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = low_level_output &rArr; ETH_TxPkt_ChainMode &rArr; Ethernet_Configuration &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2e91f5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_TxPkt_ChainMode
<LI><a href="#[2e91fd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetCurrentTxBuffer
<LI><a href="#[2fd1cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[2eba9a0]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[2eba964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[fdc3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2eba964]"></a>SetSysClockTo72</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Called By]<UL><LI><a href="#[2eba9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[2f32dcc]"></a>crc7</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, sd.o(i.crc7))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc7
</UL>
<BR>[Called By]<UL><LI><a href="#[2f326c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_Command_crc
</UL>

<P><STRONG><a name="[2f31878]"></a>SPI_Config</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, sd_stm32.o(i.SPI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fdc470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[fdc5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2d04304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[2d04610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f316d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiInit
</UL>

<P><STRONG><a name="[2f3183c]"></a>my_if_spiSend</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sd_stm32.o(i.my_if_spiSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = my_if_spiSend
</UL>
<BR>[Calls]<UL><LI><a href="#[2d04340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[2d0437c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[2d04430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f316d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_spiInit
</UL>

<P><STRONG><a name="[2fd3b28]"></a>prvvTIMERExpiredISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, porttimer_m.o(i.prvvTIMERExpiredISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvTIMERExpiredISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd39fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[2fd2e08]"></a>prvvUARTRxISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, portserial_m.o(i.prvvUARTRxISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvUARTRxISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd2ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[2fd2dcc]"></a>prvvUARTTxReadyISR</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, portserial_m.o(i.prvvUARTTxReadyISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvvUARTTxReadyISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd2ca0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[2fcb860]"></a>_printf_core</STRONG> (Thumb, 764 bytes, Stack size 104 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2fcb7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2fcb824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[30c69dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2fcb518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>

<P><STRONG><a name="[2fcb824]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fcb860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2fcb7e8]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fcb860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2fcb770]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf6.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[2fcb518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0sprintf$6)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
